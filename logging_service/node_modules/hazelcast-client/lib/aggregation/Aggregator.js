"use strict";
/*
 * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.LongSumAggregator = exports.LongAverageAggregator = exports.IntegerSumAggregator = exports.IntegerAverageAggregator = exports.MinAggregator = exports.MaxAggregator = exports.FloatingPointSumAggregator = exports.FixedPointSumAggregator = exports.NumberAverageAggregator = exports.DoubleSumAggregator = exports.DoubleAverageAggregator = exports.CountAggregator = exports.AbstractAggregator = void 0;
const Long = require("long");
const AggregatorFactory = require("./AggregatorFactory");
/** @internal */
class AbstractAggregator {
    constructor(attributePath) {
        this.factoryId = AggregatorFactory.AGGREGATOR_FACTORY_ID;
        this.attributePath = attributePath;
    }
}
exports.AbstractAggregator = AbstractAggregator;
/** @internal */
class CountAggregator extends AbstractAggregator {
    constructor() {
        super(...arguments);
        this.classId = AggregatorFactory.COUNT;
    }
    readData(input) {
        this.attributePath = input.readUTF();
        // member side field, not used in client
        input.readLong();
    }
    writeData(output) {
        output.writeUTF(this.attributePath);
        // member side field, not used in client
        output.writeLong(Long.ZERO);
    }
}
exports.CountAggregator = CountAggregator;
/** @internal */
class DoubleAverageAggregator extends AbstractAggregator {
    constructor() {
        super(...arguments);
        this.classId = AggregatorFactory.DOUBLE_AVG;
    }
    readData(input) {
        this.attributePath = input.readUTF();
        input.readDouble();
        input.readLong();
    }
    writeData(output) {
        output.writeUTF(this.attributePath);
        output.writeDouble(0);
        output.writeLong(Long.ZERO);
    }
}
exports.DoubleAverageAggregator = DoubleAverageAggregator;
/** @internal */
class DoubleSumAggregator extends AbstractAggregator {
    constructor() {
        super(...arguments);
        this.classId = AggregatorFactory.DOUBLE_SUM;
    }
    readData(input) {
        this.attributePath = input.readUTF();
        input.readDouble();
    }
    writeData(output) {
        output.writeUTF(this.attributePath);
        output.writeDouble(0);
    }
}
exports.DoubleSumAggregator = DoubleSumAggregator;
/** @internal */
class NumberAverageAggregator extends AbstractAggregator {
    constructor() {
        super(...arguments);
        this.classId = AggregatorFactory.NUMBER_AVG;
    }
    readData(input) {
        this.attributePath = input.readUTF();
        input.readDouble();
        input.readLong();
    }
    writeData(output) {
        output.writeUTF(this.attributePath);
        output.writeDouble(0);
        output.writeLong(Long.ZERO);
    }
}
exports.NumberAverageAggregator = NumberAverageAggregator;
/** @internal */
class FixedPointSumAggregator extends AbstractAggregator {
    constructor() {
        super(...arguments);
        this.classId = AggregatorFactory.FIXED_SUM;
    }
    readData(input) {
        this.attributePath = input.readUTF();
        input.readLong();
    }
    writeData(output) {
        output.writeUTF(this.attributePath);
        output.writeLong(Long.ZERO);
    }
}
exports.FixedPointSumAggregator = FixedPointSumAggregator;
/** @internal */
class FloatingPointSumAggregator extends AbstractAggregator {
    constructor() {
        super(...arguments);
        this.classId = AggregatorFactory.FLOATING_POINT_SUM;
    }
    readData(input) {
        this.attributePath = input.readUTF();
        input.readDouble();
    }
    writeData(output) {
        output.writeUTF(this.attributePath);
        output.writeDouble(0);
    }
}
exports.FloatingPointSumAggregator = FloatingPointSumAggregator;
/** @internal */
class MaxAggregator extends AbstractAggregator {
    constructor() {
        super(...arguments);
        this.classId = AggregatorFactory.MAX;
    }
    readData(input) {
        this.attributePath = input.readUTF();
        input.readObject();
    }
    writeData(output) {
        output.writeUTF(this.attributePath);
        output.writeObject(null);
    }
}
exports.MaxAggregator = MaxAggregator;
/** @internal */
class MinAggregator extends AbstractAggregator {
    constructor() {
        super(...arguments);
        this.classId = AggregatorFactory.MIN;
    }
    readData(input) {
        this.attributePath = input.readUTF();
        input.readObject();
    }
    writeData(output) {
        output.writeUTF(this.attributePath);
        output.writeObject(null);
    }
}
exports.MinAggregator = MinAggregator;
/** @internal */
class IntegerAverageAggregator extends AbstractAggregator {
    constructor() {
        super(...arguments);
        this.classId = AggregatorFactory.INT_AVG;
    }
    readData(input) {
        this.attributePath = input.readUTF();
        input.readLong();
        input.readLong();
    }
    writeData(output) {
        output.writeUTF(this.attributePath);
        output.writeLong(Long.ZERO);
        output.writeLong(Long.ZERO);
    }
}
exports.IntegerAverageAggregator = IntegerAverageAggregator;
/** @internal */
class IntegerSumAggregator extends AbstractAggregator {
    constructor() {
        super(...arguments);
        this.classId = AggregatorFactory.INT_SUM;
    }
    readData(input) {
        this.attributePath = input.readUTF();
        input.readLong();
    }
    writeData(output) {
        output.writeUTF(this.attributePath);
        output.writeLong(Long.ZERO);
    }
}
exports.IntegerSumAggregator = IntegerSumAggregator;
/** @internal */
class LongAverageAggregator extends AbstractAggregator {
    constructor() {
        super(...arguments);
        this.classId = AggregatorFactory.LONG_AVG;
    }
    readData(input) {
        this.attributePath = input.readUTF();
        input.readLong();
        input.readLong();
    }
    writeData(output) {
        output.writeUTF(this.attributePath);
        output.writeLong(Long.ZERO);
        output.writeLong(Long.ZERO);
    }
}
exports.LongAverageAggregator = LongAverageAggregator;
/** @internal */
class LongSumAggregator extends AbstractAggregator {
    constructor() {
        super(...arguments);
        this.classId = AggregatorFactory.LONG_SUM;
    }
    readData(input) {
        this.attributePath = input.readUTF();
        input.readLong();
    }
    writeData(output) {
        output.writeUTF(this.attributePath);
        output.writeLong(Long.ZERO);
    }
}
exports.LongSumAggregator = LongSumAggregator;

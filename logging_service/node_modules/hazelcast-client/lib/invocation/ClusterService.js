"use strict";
/*
 * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/** @ignore */ /** */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClusterService = void 0;
const Util_1 = require("../util/Util");
const UuidUtil_1 = require("../util/UuidUtil");
const TranslateAddressProvider_1 = require("../network/TranslateAddressProvider");
const core_1 = require("../core");
class MemberListSnapshot {
    constructor(version, members, memberList) {
        this.version = version;
        this.members = members;
        this.memberList = memberList;
    }
}
const EMPTY_SNAPSHOT = new MemberListSnapshot(-1, new Map(), []);
const INITIAL_MEMBERS_TIMEOUT_IN_MILLIS = 120 * 1000; // 120 seconds
/**
 * Manages the relationship of this client with the cluster.
 * @internal
 */
class ClusterService {
    constructor(client) {
        this.listeners = new Map();
        this.initialListFetched = Util_1.deferredPromise();
        this.memberListSnapshot = EMPTY_SNAPSHOT;
        this.client = client;
        this.connectionManager = client.getConnectionManager();
        this.labels = new Set(client.getConfig().clientLabels);
        const logger = client.getLoggingService().getLogger();
        this.logger = logger;
        this.translateToAddressProvider =
            new TranslateAddressProvider_1.TranslateAddressProvider(client.getConfig(), logger);
    }
    /**
     * Gets the member with the given UUID.
     *
     * @param uuid The UUID of the member.
     * @return The member that was found, or undefined if not found.
     */
    getMember(uuid) {
        Util_1.assertNotNull(uuid);
        return this.memberListSnapshot.members.get(uuid.toString());
    }
    getMembers(selector) {
        const members = this.getMemberList();
        if (selector == null) {
            return members;
        }
        const selectedMembers = [];
        members.forEach((member) => {
            if (selector(member)) {
                selectedMembers.push(member);
            }
        });
        return selectedMembers;
    }
    /**
     * Gets the current number of members.
     *
     * @return The current number of members.
     */
    getSize() {
        return this.memberListSnapshot.members.size;
    }
    /**
     * @return The {@link ClientInfo} instance representing the local client.
     */
    getLocalClient() {
        const connectionManager = this.client.getConnectionManager();
        const connection = connectionManager.getRandomConnection();
        const localAddress = connection != null ? connection.getLocalAddress() : null;
        const info = new core_1.ClientInfo();
        info.uuid = connectionManager.getClientUuid();
        info.localAddress = localAddress;
        info.labels = this.labels;
        info.name = this.client.getName();
        return info;
    }
    addMembershipListener(listener) {
        Util_1.assertNotNull(listener);
        const registrationId = UuidUtil_1.UuidUtil.generate().toString();
        this.listeners.set(registrationId, listener);
        if (this.isInitialMembershipListener(listener)) {
            const members = this.getMemberList();
            // if members are empty,it means initial event did not arrive yet
            // it will be redirected to listeners when it arrives see #handleInitialMembershipEvent
            if (members.length !== 0) {
                const event = new core_1.InitialMembershipEvent(members);
                listener.init(event);
            }
        }
        return registrationId;
    }
    removeMembershipListener(listenerId) {
        Util_1.assertNotNull(listenerId);
        return this.listeners.delete(listenerId);
    }
    start(configuredListeners) {
        for (const listener of configuredListeners) {
            this.addMembershipListener(listener);
        }
    }
    reset() {
        this.logger.debug('ClusterService', 'Resetting the cluster snapshot.');
        this.initialListFetched = Util_1.deferredPromise();
        this.memberListSnapshot = EMPTY_SNAPSHOT;
    }
    waitForInitialMemberList() {
        return Util_1.timedPromise(this.initialListFetched.promise, INITIAL_MEMBERS_TIMEOUT_IN_MILLIS)
            .catch((err) => {
            return Promise.reject(new core_1.IllegalStateError('Could not get initial member list from the cluster!', err));
        });
    }
    clearMemberListVersion() {
        this.logger.trace('ClusterService', 'Resetting the member list version.');
        if (this.memberListSnapshot !== EMPTY_SNAPSHOT) {
            this.memberListSnapshot.version = 0;
        }
    }
    handleMembersViewEvent(memberListVersion, memberInfos) {
        if (this.memberListSnapshot === EMPTY_SNAPSHOT) {
            this.applyInitialState(memberListVersion, memberInfos)
                .then(this.initialListFetched.resolve)
                .catch((err) => {
                this.logger.warn('ClusterService', 'Could not apply initial member list.', err);
            });
            return;
        }
        if (memberListVersion >= this.memberListSnapshot.version) {
            const prevMembers = this.memberListSnapshot.memberList;
            const snapshot = this.createSnapshot(memberListVersion, memberInfos);
            this.memberListSnapshot = snapshot;
            const currentMembers = snapshot.memberList;
            const events = this.detectMembershipEvents(prevMembers, currentMembers);
            this.fireEvents(events);
        }
    }
    translateToPublicAddress() {
        return this.translateToAddressProvider.get();
    }
    fireEvents(events) {
        for (const event of events) {
            this.listeners.forEach((listener) => {
                if (event.eventType === core_1.MemberEvent.ADDED && listener.memberAdded) {
                    listener.memberAdded(event);
                }
                else if (event.eventType === core_1.MemberEvent.REMOVED && listener.memberRemoved) {
                    listener.memberRemoved(event);
                }
            });
        }
    }
    isInitialMembershipListener(listener) {
        return listener.init !== undefined;
    }
    applyInitialState(memberListVersion, memberInfos) {
        const snapshot = this.createSnapshot(memberListVersion, memberInfos);
        this.memberListSnapshot = snapshot;
        this.logger.info('ClusterService', this.membersString(snapshot));
        const members = snapshot.memberList;
        const event = new core_1.InitialMembershipEvent(members);
        this.listeners.forEach((listener) => {
            if (this.isInitialMembershipListener(listener)) {
                listener.init(event);
            }
        });
        const addressProvider = this.client.getClusterFailoverService().current().addressProvider;
        return this.translateToAddressProvider.refresh(addressProvider, memberInfos);
    }
    detectMembershipEvents(prevMembers, currentMembers) {
        const newMembers = new Array();
        const deadMembers = new Map();
        for (const member of prevMembers) {
            deadMembers.set(member.id(), member);
        }
        for (const member of currentMembers) {
            if (!deadMembers.delete(member.id())) {
                newMembers.push(member);
            }
        }
        const events = new Array(deadMembers.size + newMembers.length);
        let index = 0;
        // removal events should be added before added events
        deadMembers.forEach((member) => {
            events[index++] = new core_1.MembershipEvent(member, core_1.MemberEvent.REMOVED, currentMembers);
            const connection = this.connectionManager.getConnection(member.uuid);
            if (connection != null) {
                connection.close(null, new core_1.TargetDisconnectedError('The client has closed the connection to this '
                    + 'member, after receiving a member left event from the cluster ' + connection));
            }
        });
        for (const member of newMembers) {
            events[index++] = new core_1.MembershipEvent(member, core_1.MemberEvent.ADDED, currentMembers);
        }
        if (events.length !== 0) {
            if (this.memberListSnapshot.members.size !== 0) {
                this.logger.info('ClusterService', this.membersString(this.memberListSnapshot));
            }
        }
        return events;
    }
    createSnapshot(memberListVersion, memberInfos) {
        const newMembers = new Map();
        const newMemberList = new Array(memberInfos.length);
        let index = 0;
        for (const memberInfo of memberInfos) {
            const member = new core_1.MemberImpl(memberInfo.address, memberInfo.uuid, memberInfo.attributes, memberInfo.liteMember, memberInfo.version, memberInfo.addressMap);
            newMembers.set(memberInfo.uuid.toString(), member);
            newMemberList[index++] = member;
        }
        return new MemberListSnapshot(memberListVersion, newMembers, newMemberList);
    }
    membersString(snapshot) {
        const members = snapshot.memberList;
        let logString = '\n\nMembers [' + members.length + '] {';
        for (const member of members) {
            logString += '\n\t' + member.toString();
        }
        logString += '\n}\n';
        return logString;
    }
    getMemberList() {
        return this.memberListSnapshot.memberList;
    }
}
exports.ClusterService = ClusterService;

"use strict";
/*
 * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/** @ignore */ /** */
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvocationService = exports.Invocation = void 0;
const assert = require("assert");
const core_1 = require("../core");
const ClientMessage_1 = require("../protocol/ClientMessage");
const ClientLocalBackupListenerCodec_1 = require("../codec/ClientLocalBackupListenerCodec");
const ErrorsCodec_1 = require("../codec/builtin/ErrorsCodec");
const Util_1 = require("../util/Util");
const MAX_FAST_INVOCATION_COUNT = 5;
const PROPERTY_INVOCATION_RETRY_PAUSE_MILLIS = 'hazelcast.client.invocation.retry.pause.millis';
const PROPERTY_INVOCATION_TIMEOUT_MILLIS = 'hazelcast.client.invocation.timeout.millis';
const PROPERTY_CLEAN_RESOURCES_MILLIS = 'hazelcast.client.internal.clean.resources.millis';
const PROPERTY_BACKUP_TIMEOUT_MILLIS = 'hazelcast.client.operation.backup.timeout.millis';
const PROPERTY_FAIL_ON_INDETERMINATE_STATE = 'hazelcast.client.operation.fail.on.indeterminate.state';
/**
 * A request to be sent to a hazelcast node.
 * @internal
 */
class Invocation {
    constructor(client, request, timeoutMillis) {
        /**
         * Number of backups acks received.
         */
        this.backupsAcksReceived = 0;
        /**
         * Number of expected backups. It is set correctly as soon as the pending response is set.
         */
        this.backupsAcksExpected = -1;
        /**
         * The time in millis when the response of the primary has been received.
         */
        this.pendingResponseReceivedMillis = -1;
        this.invokeCount = 0;
        /**
         * True if this invocation is urgent (can be invoked even in the client is in the disconnected state), false otherwise.
         */
        this.urgent = false;
        this.client = client;
        this.invocationService = client.getInvocationService();
        this.deadline = timeoutMillis === undefined
            ? Date.now() + this.invocationService.invocationTimeoutMillis
            : Date.now() + timeoutMillis;
        this.request = request;
    }
    /**
     * @returns {boolean}
     */
    hasPartitionId() {
        return this.hasOwnProperty('partitionId') && this.partitionId >= 0;
    }
    shouldRetry(err) {
        if (this.connection != null
            && (err instanceof core_1.IOError || err instanceof core_1.TargetDisconnectedError)) {
            return false;
        }
        if (this.uuid != null && err instanceof core_1.TargetNotMemberError) {
            // when invocation is sent to a specific member
            // and target is no longer a member, we should not retry
            // note that this exception could come from the server
            return false;
        }
        if (err instanceof core_1.IOError
            || err instanceof core_1.HazelcastInstanceNotActiveError
            || err instanceof core_1.RetryableHazelcastError) {
            return true;
        }
        if (err instanceof core_1.TargetDisconnectedError) {
            return this.request.isRetryable() || this.invocationService.redoOperationEnabled();
        }
        return false;
    }
    notify(clientMessage) {
        assert(clientMessage != null, 'Response can not be null');
        const expectedBackups = clientMessage.getNumberOfBackupAcks();
        if (expectedBackups > this.backupsAcksReceived) {
            this.pendingResponseReceivedMillis = Date.now();
            this.backupsAcksExpected = expectedBackups;
            this.pendingResponseMessage = clientMessage;
            return;
        }
        this.complete(clientMessage);
    }
    notifyBackupComplete() {
        this.backupsAcksReceived++;
        if (this.pendingResponseMessage == null) {
            return;
        }
        if (this.backupsAcksExpected !== this.backupsAcksReceived) {
            return;
        }
        this.complete(this.pendingResponseMessage);
    }
    detectAndHandleBackupTimeout(timeoutMillis) {
        if (this.pendingResponseMessage == null) {
            return;
        }
        if (this.backupsAcksExpected === this.backupsAcksReceived) {
            return;
        }
        const expirationTime = this.pendingResponseReceivedMillis + timeoutMillis;
        const timeoutReached = expirationTime > 0 && expirationTime < Date.now();
        if (!timeoutReached) {
            return;
        }
        if (this.invocationService.shouldFailOnIndeterminateState) {
            this.completeWithError(new core_1.IndeterminateOperationStateError('Invocation '
                + this.request.getCorrelationId() + ' failed because of missed backup acks'));
            return;
        }
        this.complete(this.pendingResponseMessage);
    }
    complete(clientMessage) {
        this.deferred.resolve(clientMessage);
        this.invocationService.deregisterInvocation(this.request.getCorrelationId());
    }
    completeWithError(err) {
        this.deferred.reject(err);
        this.invocationService.deregisterInvocation(this.request.getCorrelationId());
    }
}
exports.Invocation = Invocation;
const backupListenerCodec = {
    encodeAddRequest(localOnly) {
        return ClientLocalBackupListenerCodec_1.ClientLocalBackupListenerCodec.encodeRequest();
    },
    decodeAddResponse(msg) {
        return ClientLocalBackupListenerCodec_1.ClientLocalBackupListenerCodec.decodeResponse(msg);
    },
    encodeRemoveRequest(listenerId) {
        return null;
    }
};
/**
 * Sends requests to appropriate nodes. Resolves waiting promises with responses.
 * @internal
 */
class InvocationService {
    constructor(client) {
        this.eventHandlers = new Map();
        this.pending = new Map();
        this.correlationCounter = 1;
        this.client = client;
        this.connectionManager = client.getConnectionManager();
        this.partitionService = client.getPartitionService();
        this.logger = this.client.getLoggingService().getLogger();
        const config = client.getConfig();
        if (config.network.smartRouting) {
            this.doInvoke = this.invokeSmart;
        }
        else {
            this.doInvoke = this.invokeNonSmart;
        }
        this.invocationRetryPauseMillis =
            config.properties[PROPERTY_INVOCATION_RETRY_PAUSE_MILLIS];
        this.invocationTimeoutMillis =
            config.properties[PROPERTY_INVOCATION_TIMEOUT_MILLIS];
        this.operationBackupTimeoutMillis =
            config.properties[PROPERTY_BACKUP_TIMEOUT_MILLIS];
        this.shouldFailOnIndeterminateState =
            config.properties[PROPERTY_FAIL_ON_INDETERMINATE_STATE];
        this.cleanResourcesMillis =
            config.properties[PROPERTY_CLEAN_RESOURCES_MILLIS];
        this.redoOperation = config.network.redoOperation;
        this.backupAckToClientEnabled = config.network.smartRouting && config.backupAckToClientEnabled;
        this.isShutdown = false;
    }
    start() {
        this.cleanResourcesTask = this.scheduleCleanResourcesTask(this.cleanResourcesMillis);
        if (this.backupAckToClientEnabled) {
            const listenerService = this.client.getListenerService();
            return listenerService.registerListener(backupListenerCodec, this.backupEventHandler.bind(this)).then(() => { });
        }
        return Promise.resolve();
    }
    scheduleCleanResourcesTask(periodMillis) {
        return Util_1.scheduleWithRepetition(() => {
            for (const invocation of this.pending.values()) {
                const connection = invocation.sendConnection;
                if (connection === undefined) {
                    continue;
                }
                if (!connection.isAlive()) {
                    this.notifyError(invocation, new core_1.TargetDisconnectedError(connection.getClosedReason()));
                    continue;
                }
                if (this.backupAckToClientEnabled) {
                    invocation.detectAndHandleBackupTimeout(this.operationBackupTimeoutMillis);
                }
            }
        }, periodMillis, periodMillis);
    }
    shutdown() {
        if (this.isShutdown) {
            return;
        }
        this.isShutdown = true;
        if (this.cleanResourcesTask !== undefined) {
            Util_1.cancelRepetitionTask(this.cleanResourcesTask);
        }
        for (const invocation of this.pending.values()) {
            this.notifyError(invocation, new core_1.ClientNotActiveError('Client is shutting down.'));
        }
    }
    redoOperationEnabled() {
        return this.redoOperation;
    }
    invoke(invocation) {
        invocation.deferred = Util_1.deferredPromise();
        const newCorrelationId = this.correlationCounter++;
        invocation.request.setCorrelationId(newCorrelationId);
        this.doInvoke(invocation);
        return invocation.deferred.promise;
    }
    invokeUrgent(invocation) {
        invocation.urgent = true;
        return this.invoke(invocation);
    }
    /**
     * Invokes given invocation on specified connection.
     * @param connection
     * @param request
     * @param handler called with values returned from server for this invocation.
     * @returns
     */
    invokeOnConnection(connection, request, handler) {
        const invocation = new Invocation(this.client, request);
        invocation.connection = connection;
        if (handler) {
            invocation.handler = handler;
        }
        return this.invoke(invocation);
    }
    /**
     * Invokes given invocation on the node that owns given partition.
     * Optionally overrides invocation timeout.
     */
    invokeOnPartition(request, partitionId, timeoutMillis) {
        const invocation = new Invocation(this.client, request, timeoutMillis);
        invocation.partitionId = partitionId;
        return this.invoke(invocation);
    }
    /**
     * Invokes given invocation on the host with given UUID.
     */
    invokeOnTarget(request, target) {
        const invocation = new Invocation(this.client, request);
        invocation.uuid = target;
        return this.invoke(invocation);
    }
    /**
     * Invokes given invocation on any host.
     * Useful when an operation is not bound to any host but a generic operation.
     */
    invokeOnRandomTarget(request) {
        return this.invoke(new Invocation(this.client, request));
    }
    /**
     * Removes the handler for all event handlers with a specific correlation id.
     */
    removeEventHandler(correlationId) {
        this.eventHandlers.delete(correlationId);
    }
    backupEventHandler(clientMessage) {
        ClientLocalBackupListenerCodec_1.ClientLocalBackupListenerCodec.handle(clientMessage, (correlationId) => {
            const invocation = this.pending.get(correlationId.toNumber());
            if (invocation === undefined) {
                this.logger.trace('InvocationService', 'Invocation not found for backup event, invocation id '
                    + correlationId);
                return;
            }
            invocation.notifyBackupComplete();
        });
    }
    /**
     * Extracts codec specific properties in a protocol message and resolves waiting promise.
     */
    processResponse(clientMessage) {
        const correlationId = clientMessage.getCorrelationId();
        if (clientMessage.startFrame.hasEventFlag() || clientMessage.startFrame.hasBackupEventFlag()) {
            process.nextTick(() => {
                const eventHandler = this.eventHandlers.get(correlationId);
                if (eventHandler !== undefined) {
                    eventHandler.handler(clientMessage);
                }
            });
            return;
        }
        const pendingInvocation = this.pending.get(correlationId);
        if (pendingInvocation === undefined) {
            if (!this.isShutdown) {
                this.logger.warn('InvocationService', 'Found no registration for invocation id ' + correlationId);
            }
            return;
        }
        const messageType = clientMessage.getMessageType();
        if (messageType === ErrorsCodec_1.EXCEPTION_MESSAGE_TYPE) {
            const remoteError = this.client.getErrorFactory().createErrorFromClientMessage(clientMessage);
            this.notifyError(pendingInvocation, remoteError);
        }
        else {
            pendingInvocation.notify(clientMessage);
        }
    }
    invokeSmart(invocation) {
        invocation.invokeCount++;
        if (!invocation.urgent) {
            const error = this.connectionManager.checkIfInvocationAllowed();
            if (error != null) {
                this.notifyError(invocation, error);
                return;
            }
        }
        let invocationPromise;
        if (invocation.hasOwnProperty('connection')) {
            invocationPromise = this.send(invocation, invocation.connection);
            invocationPromise.catch((err) => {
                this.notifyError(invocation, err);
            });
            return;
        }
        if (invocation.hasPartitionId()) {
            invocationPromise = this.invokeOnPartitionOwner(invocation, invocation.partitionId);
        }
        else if (invocation.hasOwnProperty('uuid')) {
            invocationPromise = this.invokeOnUuid(invocation, invocation.uuid);
        }
        else {
            invocationPromise = this.invokeOnRandomConnection(invocation);
        }
        invocationPromise.catch(() => {
            return this.invokeOnRandomConnection(invocation);
        }).catch((err) => {
            this.notifyError(invocation, err);
        });
    }
    invokeNonSmart(invocation) {
        invocation.invokeCount++;
        if (!invocation.urgent) {
            const error = this.connectionManager.checkIfInvocationAllowed();
            if (error != null) {
                this.notifyError(invocation, error);
                return;
            }
        }
        let invocationPromise;
        if (invocation.hasOwnProperty('connection')) {
            invocationPromise = this.send(invocation, invocation.connection);
        }
        else {
            invocationPromise = this.invokeOnRandomConnection(invocation);
        }
        invocationPromise.catch((err) => {
            this.notifyError(invocation, err);
        });
    }
    invokeOnRandomConnection(invocation) {
        const connection = this.connectionManager.getRandomConnection();
        if (connection == null) {
            return Promise.reject(new core_1.IOError('No connection found to invoke'));
        }
        return this.send(invocation, connection);
    }
    invokeOnUuid(invocation, target) {
        const connection = this.connectionManager.getConnection(target);
        if (connection == null) {
            this.logger.trace('InvocationService', `Client is not connected to target: ${target}`);
            return Promise.reject(new core_1.IOError('No connection found to invoke'));
        }
        return this.send(invocation, connection);
    }
    invokeOnPartitionOwner(invocation, partitionId) {
        const partitionOwner = this.partitionService.getPartitionOwner(partitionId);
        if (partitionOwner == null) {
            this.logger.trace('InvocationService', 'Partition owner is not assigned yet');
            return Promise.reject(new core_1.IOError('No connection found to invoke'));
        }
        return this.invokeOnUuid(invocation, partitionOwner);
    }
    send(invocation, connection) {
        assert(connection != null);
        if (this.isShutdown) {
            return Promise.reject(new core_1.ClientNotActiveError('Client is shutting down.'));
        }
        if (this.backupAckToClientEnabled) {
            invocation.request.getStartFrame().addFlag(ClientMessage_1.IS_BACKUP_AWARE_FLAG);
        }
        this.registerInvocation(invocation);
        return connection.write(invocation.request)
            .then(() => {
            invocation.sendConnection = connection;
        });
    }
    notifyError(invocation, error) {
        const correlationId = invocation.request.getCorrelationId();
        if (this.rejectIfNotRetryable(invocation, error)) {
            this.pending.delete(correlationId);
            return;
        }
        this.logger.debug('InvocationService', 'Retrying(' + invocation.invokeCount + ') on correlation-id=' + correlationId, error);
        if (invocation.invokeCount < MAX_FAST_INVOCATION_COUNT) {
            this.doInvoke(invocation);
        }
        else {
            setTimeout(this.doInvoke.bind(this, invocation), this.invocationRetryPauseMillis);
        }
    }
    /**
     * Determines if an error is retryable. The given invocation is rejected with
     * appropriate error if the error is not retryable.
     *
     * @param invocation
     * @param error
     * @returns `true` if invocation is rejected, `false` otherwise
     */
    rejectIfNotRetryable(invocation, error) {
        if (!this.client.getLifecycleService().isRunning()) {
            invocation.deferred.reject(new core_1.ClientNotActiveError('Client is shutting down.', error));
            return true;
        }
        if (!invocation.shouldRetry(error)) {
            invocation.deferred.reject(error);
            return true;
        }
        if (invocation.deadline < Date.now()) {
            this.logger.trace('InvocationService', 'Error will not be retried because invocation timed out');
            invocation.deferred.reject(new core_1.OperationTimeoutError('Invocation '
                + invocation.request.getCorrelationId() + ') reached its deadline.', error));
            return true;
        }
    }
    registerInvocation(invocation) {
        const message = invocation.request;
        const correlationId = message.getCorrelationId();
        if (invocation.hasPartitionId()) {
            message.setPartitionId(invocation.partitionId);
        }
        else {
            message.setPartitionId(-1);
        }
        if (invocation.hasOwnProperty('handler')) {
            this.eventHandlers.set(correlationId, invocation);
        }
        this.pending.set(correlationId, invocation);
    }
    deregisterInvocation(correlationId) {
        this.pending.delete(correlationId);
    }
}
exports.InvocationService = InvocationService;

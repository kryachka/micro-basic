"use strict";
/*
 * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UndefinedErrorCodeError = exports.NotLeaderError = exports.CannotReplicateError = exports.StaleAppendRequestError = exports.LeaderDemotedError = exports.WaitKeyCancelledError = exports.IllegalMonitorStateError = exports.LockOwnershipLostError = exports.CPGroupDestroyedError = exports.SessionExpiredError = exports.NullPointerError = exports.NoSuchElementError = exports.NegativeArraySizeError = exports.InvalidAddressError = exports.InterruptedError = exports.IndexOutOfBoundsError = exports.IllegalArgumentError = exports.ArrayStoreError = exports.ArrayIndexOutOfBoundsError = exports.IndeterminateOperationStateError = exports.ReachedMaxSizeError = exports.NodeIdOutOfRangeError = exports.StaleTaskIdError = exports.NoDataMemberInClusterError = exports.ConsistencyLostError = exports.UnsupportedOperationError = exports.TargetDisconnectedError = exports.RetryableIOError = exports.SplitBrainProtectionError = exports.TransactionTimedOutError = exports.TransactionNotActiveError = exports.TransactionError = exports.QueryError = exports.PartitionMigratingError = exports.MemberLeftError = exports.HazelcastInstanceNotActiveError = exports.DistributedObjectDestroyedError = exports.ConfigMismatchError = exports.ConcurrentModificationError = exports.ClassNotFoundError = exports.ClassCastError = exports.CancellationError = exports.CallerNotMemberError = exports.TargetNotMemberError = exports.RetryableHazelcastError = exports.OperationTimeoutError = exports.IOError = exports.TopicOverloadError = exports.StaleSequenceError = exports.IllegalStateError = exports.InvalidConfigurationError = exports.ClientOfflineError = exports.ClientNotAllowedInClusterError = exports.ClientNotActiveError = exports.AuthenticationError = exports.HazelcastSerializationError = exports.HazelcastError = void 0;
/**
 * Base class for all specific exceptions thrown by Hazelcast client.
 */
class HazelcastError extends Error {
    constructor(msg, cause, serverStackTrace) {
        super(msg);
        this.cause = cause;
        this.serverStackTrace = serverStackTrace;
        Error.captureStackTrace(this, HazelcastError);
        Object.setPrototypeOf(this, HazelcastError.prototype);
    }
}
exports.HazelcastError = HazelcastError;
class HazelcastSerializationError extends HazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, HazelcastSerializationError.prototype);
    }
}
exports.HazelcastSerializationError = HazelcastSerializationError;
class AuthenticationError extends HazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, AuthenticationError.prototype);
    }
}
exports.AuthenticationError = AuthenticationError;
class ClientNotActiveError extends HazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, ClientNotActiveError.prototype);
    }
}
exports.ClientNotActiveError = ClientNotActiveError;
/**
 * Thrown when the client can not use a cluster. Examples:
 * - Cluster blacklisted the client
 * - Cluster partition counts are different between alternative clusters
 */
class ClientNotAllowedInClusterError extends HazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, ClientNotAllowedInClusterError.prototype);
    }
}
exports.ClientNotAllowedInClusterError = ClientNotAllowedInClusterError;
class ClientOfflineError extends HazelcastError {
    constructor(cause) {
        super('No connection found to cluster', cause);
        Object.setPrototypeOf(this, ClientOfflineError.prototype);
    }
}
exports.ClientOfflineError = ClientOfflineError;
class InvalidConfigurationError extends HazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, InvalidConfigurationError.prototype);
    }
}
exports.InvalidConfigurationError = InvalidConfigurationError;
class IllegalStateError extends HazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, IllegalStateError.prototype);
    }
}
exports.IllegalStateError = IllegalStateError;
class StaleSequenceError extends HazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, StaleSequenceError.prototype);
    }
}
exports.StaleSequenceError = StaleSequenceError;
class TopicOverloadError extends HazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, TopicOverloadError.prototype);
    }
}
exports.TopicOverloadError = TopicOverloadError;
class IOError extends HazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, IOError.prototype);
    }
}
exports.IOError = IOError;
class OperationTimeoutError extends HazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, OperationTimeoutError.prototype);
    }
}
exports.OperationTimeoutError = OperationTimeoutError;
class RetryableHazelcastError extends HazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, RetryableHazelcastError.prototype);
    }
}
exports.RetryableHazelcastError = RetryableHazelcastError;
class TargetNotMemberError extends RetryableHazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, TargetNotMemberError.prototype);
    }
}
exports.TargetNotMemberError = TargetNotMemberError;
class CallerNotMemberError extends RetryableHazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, CallerNotMemberError.prototype);
    }
}
exports.CallerNotMemberError = CallerNotMemberError;
class CancellationError extends IllegalStateError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, CancellationError.prototype);
    }
}
exports.CancellationError = CancellationError;
class ClassCastError extends HazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, ClassCastError.prototype);
    }
}
exports.ClassCastError = ClassCastError;
class ClassNotFoundError extends HazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, ClassNotFoundError.prototype);
    }
}
exports.ClassNotFoundError = ClassNotFoundError;
class ConcurrentModificationError extends HazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, ConcurrentModificationError.prototype);
    }
}
exports.ConcurrentModificationError = ConcurrentModificationError;
class ConfigMismatchError extends HazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, ConfigMismatchError.prototype);
    }
}
exports.ConfigMismatchError = ConfigMismatchError;
class DistributedObjectDestroyedError extends HazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, DistributedObjectDestroyedError.prototype);
    }
}
exports.DistributedObjectDestroyedError = DistributedObjectDestroyedError;
class HazelcastInstanceNotActiveError extends IllegalStateError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, HazelcastInstanceNotActiveError.prototype);
    }
}
exports.HazelcastInstanceNotActiveError = HazelcastInstanceNotActiveError;
class MemberLeftError extends RetryableHazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, MemberLeftError.prototype);
    }
}
exports.MemberLeftError = MemberLeftError;
class PartitionMigratingError extends RetryableHazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, PartitionMigratingError.prototype);
    }
}
exports.PartitionMigratingError = PartitionMigratingError;
class QueryError extends HazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, QueryError.prototype);
    }
}
exports.QueryError = QueryError;
class TransactionError extends HazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, TransactionError.prototype);
    }
}
exports.TransactionError = TransactionError;
class TransactionNotActiveError extends HazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, TransactionNotActiveError.prototype);
    }
}
exports.TransactionNotActiveError = TransactionNotActiveError;
class TransactionTimedOutError extends HazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, TransactionTimedOutError.prototype);
    }
}
exports.TransactionTimedOutError = TransactionTimedOutError;
class SplitBrainProtectionError extends TransactionError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, SplitBrainProtectionError.prototype);
    }
}
exports.SplitBrainProtectionError = SplitBrainProtectionError;
class RetryableIOError extends RetryableHazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, RetryableIOError.prototype);
    }
}
exports.RetryableIOError = RetryableIOError;
class TargetDisconnectedError extends HazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, TargetDisconnectedError.prototype);
    }
}
exports.TargetDisconnectedError = TargetDisconnectedError;
class UnsupportedOperationError extends HazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, UnsupportedOperationError.prototype);
    }
}
exports.UnsupportedOperationError = UnsupportedOperationError;
class ConsistencyLostError extends HazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, ConsistencyLostError.prototype);
    }
}
exports.ConsistencyLostError = ConsistencyLostError;
class NoDataMemberInClusterError extends HazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, NoDataMemberInClusterError.prototype);
    }
}
exports.NoDataMemberInClusterError = NoDataMemberInClusterError;
class StaleTaskIdError extends HazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, StaleTaskIdError.prototype);
    }
}
exports.StaleTaskIdError = StaleTaskIdError;
class NodeIdOutOfRangeError extends HazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, NodeIdOutOfRangeError.prototype);
    }
}
exports.NodeIdOutOfRangeError = NodeIdOutOfRangeError;
class ReachedMaxSizeError extends HazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, ReachedMaxSizeError.prototype);
    }
}
exports.ReachedMaxSizeError = ReachedMaxSizeError;
class IndeterminateOperationStateError extends HazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, IndeterminateOperationStateError.prototype);
    }
}
exports.IndeterminateOperationStateError = IndeterminateOperationStateError;
class ArrayIndexOutOfBoundsError extends HazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, ArrayIndexOutOfBoundsError.prototype);
    }
}
exports.ArrayIndexOutOfBoundsError = ArrayIndexOutOfBoundsError;
class ArrayStoreError extends HazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, ArrayStoreError.prototype);
    }
}
exports.ArrayStoreError = ArrayStoreError;
class IllegalArgumentError extends HazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, IllegalArgumentError.prototype);
    }
}
exports.IllegalArgumentError = IllegalArgumentError;
class IndexOutOfBoundsError extends HazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, IndexOutOfBoundsError.prototype);
    }
}
exports.IndexOutOfBoundsError = IndexOutOfBoundsError;
class InterruptedError extends HazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, InterruptedError.prototype);
    }
}
exports.InterruptedError = InterruptedError;
class InvalidAddressError extends HazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, InvalidAddressError.prototype);
    }
}
exports.InvalidAddressError = InvalidAddressError;
class NegativeArraySizeError extends HazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, NegativeArraySizeError.prototype);
    }
}
exports.NegativeArraySizeError = NegativeArraySizeError;
class NoSuchElementError extends HazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, NoSuchElementError.prototype);
    }
}
exports.NoSuchElementError = NoSuchElementError;
class NullPointerError extends HazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, NullPointerError.prototype);
    }
}
exports.NullPointerError = NullPointerError;
class SessionExpiredError extends HazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, SessionExpiredError.prototype);
    }
}
exports.SessionExpiredError = SessionExpiredError;
class CPGroupDestroyedError extends HazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, CPGroupDestroyedError.prototype);
    }
}
exports.CPGroupDestroyedError = CPGroupDestroyedError;
class LockOwnershipLostError extends HazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, LockOwnershipLostError.prototype);
    }
}
exports.LockOwnershipLostError = LockOwnershipLostError;
class IllegalMonitorStateError extends HazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, IllegalMonitorStateError.prototype);
    }
}
exports.IllegalMonitorStateError = IllegalMonitorStateError;
class WaitKeyCancelledError extends HazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, WaitKeyCancelledError.prototype);
    }
}
exports.WaitKeyCancelledError = WaitKeyCancelledError;
class LeaderDemotedError extends HazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, LeaderDemotedError.prototype);
    }
}
exports.LeaderDemotedError = LeaderDemotedError;
class StaleAppendRequestError extends HazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, StaleAppendRequestError.prototype);
    }
}
exports.StaleAppendRequestError = StaleAppendRequestError;
class CannotReplicateError extends RetryableHazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, CannotReplicateError.prototype);
    }
}
exports.CannotReplicateError = CannotReplicateError;
class NotLeaderError extends HazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, NotLeaderError.prototype);
    }
}
exports.NotLeaderError = NotLeaderError;
class UndefinedErrorCodeError extends HazelcastError {
    constructor(msg, cause, serverStackTrace) {
        super(msg, cause, serverStackTrace);
        Object.setPrototypeOf(this, UndefinedErrorCodeError.prototype);
    }
}
exports.UndefinedErrorCodeError = UndefinedErrorCodeError;

"use strict";
/*
 * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/** @ignore */ /** */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseProxy = void 0;
const BuildInfo_1 = require("../BuildInfo");
/**
 * Common super class for any proxy.
 * @internal
 */
class BaseProxy {
    constructor(client, serviceName, name) {
        this.client = client;
        this.name = name;
        this.serviceName = serviceName;
    }
    getPartitionKey() {
        return this.name;
    }
    getName() {
        return this.name;
    }
    getServiceName() {
        return this.serviceName;
    }
    destroy() {
        return this.client.getProxyManager().destroyProxy(this.name, this.serviceName).then(() => {
            return this.postDestroy();
        });
    }
    destroyLocally() {
        return this.postDestroy();
    }
    postDestroy() {
        return Promise.resolve();
    }
    /**
     * Encodes a request from a codec and invokes it on owner node of given key.
     */
    encodeInvokeOnKey(codec, partitionKey, ...codecArguments) {
        const partitionId = this.client.getPartitionService().getPartitionId(partitionKey);
        return this.encodeInvokeOnPartition(codec, partitionId, ...codecArguments);
    }
    /**
     * Encodes a request from a codec and invokes it on owner node of given key.
     * This method also overrides invocation timeout.
     */
    encodeInvokeOnKeyWithTimeout(timeoutMillis, codec, partitionKey, ...codecArguments) {
        const partitionId = this.client.getPartitionService().getPartitionId(partitionKey);
        return this.encodeInvokeOnPartitionWithTimeout(timeoutMillis, codec, partitionId, ...codecArguments);
    }
    /**
     * Encodes a request from a codec and invokes it on any node.
     */
    encodeInvokeOnRandomTarget(codec, ...codecArguments) {
        const clientMessage = codec.encodeRequest(this.name, ...codecArguments);
        return this.client.getInvocationService().invokeOnRandomTarget(clientMessage);
    }
    encodeInvokeOnTarget(codec, target, ...codecArguments) {
        const clientMessage = codec.encodeRequest(this.name, ...codecArguments);
        return this.client.getInvocationService().invokeOnTarget(clientMessage, target);
    }
    /**
     * Encodes a request from a codec and invokes it on owner node of given partition.
     */
    encodeInvokeOnPartition(codec, partitionId, ...codecArguments) {
        const clientMessage = codec.encodeRequest(this.name, ...codecArguments);
        return this.client.getInvocationService().invokeOnPartition(clientMessage, partitionId);
    }
    /**
     * Encodes a request from a codec and invokes it on owner node of given partition.
     * This method also overrides invocation timeout.
     */
    encodeInvokeOnPartitionWithTimeout(timeoutMillis, codec, partitionId, ...codecArguments) {
        const clientMessage = codec.encodeRequest(this.name, ...codecArguments);
        return this.client.getInvocationService().invokeOnPartition(clientMessage, partitionId, timeoutMillis);
    }
    /**
     * Serializes an object according to serialization settings of the client.
     */
    toData(object) {
        return this.client.getSerializationService().toData(object);
    }
    /**
     * De-serializes an object from binary form according to serialization settings of the client.
     */
    toObject(data) {
        return this.client.getSerializationService().toObject(data);
    }
    getConnectedServerVersion() {
        const activeConnections = this.client.getConnectionManager().getActiveConnections();
        for (const address in activeConnections) {
            return activeConnections[address].getConnectedServerVersion();
        }
        return BuildInfo_1.BuildInfo.UNKNOWN_VERSION_ID;
    }
}
exports.BaseProxy = BaseProxy;

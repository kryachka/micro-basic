"use strict";
/*
 * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/** @ignore */ /** */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AtomicRefProxy = void 0;
const BaseCPProxy_1 = require("./BaseCPProxy");
const CPProxyManager_1 = require("./CPProxyManager");
const AtomicRefCompareAndSetCodec_1 = require("../../codec/AtomicRefCompareAndSetCodec");
const AtomicRefGetCodec_1 = require("../../codec/AtomicRefGetCodec");
const AtomicRefSetCodec_1 = require("../../codec/AtomicRefSetCodec");
const AtomicRefContainsCodec_1 = require("../../codec/AtomicRefContainsCodec");
/** @internal */
class AtomicRefProxy extends BaseCPProxy_1.BaseCPProxy {
    constructor(client, groupId, proxyName, objectName) {
        super(client, CPProxyManager_1.CPProxyManager.ATOMIC_REF_SERVICE, groupId, proxyName, objectName);
    }
    compareAndSet(expect, update) {
        const expectedData = this.toData(expect);
        const newData = this.toData(update);
        return this.encodeInvokeOnRandomTarget(AtomicRefCompareAndSetCodec_1.AtomicRefCompareAndSetCodec, this.groupId, this.objectName, expectedData, newData).then(AtomicRefCompareAndSetCodec_1.AtomicRefCompareAndSetCodec.decodeResponse);
    }
    get() {
        return this.encodeInvokeOnRandomTarget(AtomicRefGetCodec_1.AtomicRefGetCodec, this.groupId, this.objectName).then((clientMessage) => {
            const response = AtomicRefGetCodec_1.AtomicRefGetCodec.decodeResponse(clientMessage);
            return this.toObject(response);
        });
    }
    set(newValue) {
        const newData = this.toData(newValue);
        return this.encodeInvokeOnRandomTarget(AtomicRefSetCodec_1.AtomicRefSetCodec, this.groupId, this.objectName, newData, false).then(() => { });
    }
    getAndSet(newValue) {
        const newData = this.toData(newValue);
        return this.encodeInvokeOnRandomTarget(AtomicRefSetCodec_1.AtomicRefSetCodec, this.groupId, this.objectName, newData, true).then((clientMessage) => {
            const response = AtomicRefSetCodec_1.AtomicRefSetCodec.decodeResponse(clientMessage);
            return this.toObject(response);
        });
    }
    isNull() {
        return this.contains(null);
    }
    clear() {
        return this.set(null);
    }
    contains(value) {
        const valueData = this.toData(value);
        return this.encodeInvokeOnRandomTarget(AtomicRefContainsCodec_1.AtomicRefContainsCodec, this.groupId, this.objectName, valueData).then(AtomicRefContainsCodec_1.AtomicRefContainsCodec.decodeResponse);
    }
}
exports.AtomicRefProxy = AtomicRefProxy;

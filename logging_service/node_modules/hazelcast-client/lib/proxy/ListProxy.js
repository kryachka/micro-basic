"use strict";
/*
 * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/** @ignore */ /** */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListProxy = void 0;
const ListAddAllCodec_1 = require("../codec/ListAddAllCodec");
const ListAddAllWithIndexCodec_1 = require("../codec/ListAddAllWithIndexCodec");
const ListAddCodec_1 = require("../codec/ListAddCodec");
const ListAddListenerCodec_1 = require("../codec/ListAddListenerCodec");
const ListAddWithIndexCodec_1 = require("../codec/ListAddWithIndexCodec");
const ListClearCodec_1 = require("../codec/ListClearCodec");
const ListCompareAndRemoveAllCodec_1 = require("../codec/ListCompareAndRemoveAllCodec");
const ListCompareAndRetainAllCodec_1 = require("../codec/ListCompareAndRetainAllCodec");
const ListContainsAllCodec_1 = require("../codec/ListContainsAllCodec");
const ListContainsCodec_1 = require("../codec/ListContainsCodec");
const ListGetAllCodec_1 = require("../codec/ListGetAllCodec");
const ListGetCodec_1 = require("../codec/ListGetCodec");
const ListIndexOfCodec_1 = require("../codec/ListIndexOfCodec");
const ListIsEmptyCodec_1 = require("../codec/ListIsEmptyCodec");
const ListLastIndexOfCodec_1 = require("../codec/ListLastIndexOfCodec");
const ListRemoveCodec_1 = require("../codec/ListRemoveCodec");
const ListRemoveListenerCodec_1 = require("../codec/ListRemoveListenerCodec");
const ListRemoveWithIndexCodec_1 = require("../codec/ListRemoveWithIndexCodec");
const ListSetCodec_1 = require("../codec/ListSetCodec");
const ListSizeCodec_1 = require("../codec/ListSizeCodec");
const ListSubCodec_1 = require("../codec/ListSubCodec");
const ItemListener_1 = require("./ItemListener");
const PartitionSpecificProxy_1 = require("./PartitionSpecificProxy");
const core_1 = require("../core");
/** @internal */
class ListProxy extends PartitionSpecificProxy_1.PartitionSpecificProxy {
    add(element) {
        return this.encodeInvoke(ListAddCodec_1.ListAddCodec, this.toData(element))
            .then(ListAddAllCodec_1.ListAddAllCodec.decodeResponse);
    }
    addAll(elements) {
        return this.encodeInvoke(ListAddAllCodec_1.ListAddAllCodec, this.serializeList(elements))
            .then(ListAddAllCodec_1.ListAddAllCodec.decodeResponse);
    }
    addAllAt(index, elements) {
        return this.encodeInvoke(ListAddAllWithIndexCodec_1.ListAddAllWithIndexCodec, index, this.serializeList(elements))
            .then(ListAddAllWithIndexCodec_1.ListAddAllWithIndexCodec.decodeResponse);
    }
    addAt(index, element) {
        return this.encodeInvoke(ListAddWithIndexCodec_1.ListAddWithIndexCodec, index, this.toData(element))
            .then(() => { });
    }
    clear() {
        return this.encodeInvoke(ListClearCodec_1.ListClearCodec).then(() => { });
    }
    contains(entry) {
        return this.encodeInvoke(ListContainsCodec_1.ListContainsCodec, this.toData(entry))
            .then(ListContainsCodec_1.ListContainsCodec.decodeResponse);
    }
    containsAll(elements) {
        return this.encodeInvoke(ListContainsAllCodec_1.ListContainsAllCodec, this.serializeList(elements))
            .then(ListContainsAllCodec_1.ListContainsAllCodec.decodeResponse);
    }
    isEmpty() {
        return this.encodeInvoke(ListIsEmptyCodec_1.ListIsEmptyCodec)
            .then(ListIsEmptyCodec_1.ListIsEmptyCodec.decodeResponse);
    }
    remove(entry) {
        return this.encodeInvoke(ListRemoveCodec_1.ListRemoveCodec, this.toData(entry))
            .then(ListRemoveCodec_1.ListRemoveCodec.decodeResponse);
    }
    removeAll(elements) {
        return this.encodeInvoke(ListCompareAndRemoveAllCodec_1.ListCompareAndRemoveAllCodec, this.serializeList(elements))
            .then(ListCompareAndRemoveAllCodec_1.ListCompareAndRemoveAllCodec.decodeResponse);
    }
    retainAll(elements) {
        return this.encodeInvoke(ListCompareAndRetainAllCodec_1.ListCompareAndRetainAllCodec, this.serializeList(elements))
            .then(ListCompareAndRetainAllCodec_1.ListCompareAndRetainAllCodec.decodeResponse);
    }
    removeAt(index) {
        return this.encodeInvoke(ListRemoveWithIndexCodec_1.ListRemoveWithIndexCodec, index)
            .then((clientMessage) => {
            const response = ListRemoveWithIndexCodec_1.ListRemoveWithIndexCodec.decodeResponse(clientMessage);
            return this.toObject(response);
        });
    }
    get(index) {
        return this.encodeInvoke(ListGetCodec_1.ListGetCodec, index)
            .then((clientMessage) => {
            const response = ListGetCodec_1.ListGetCodec.decodeResponse(clientMessage);
            return this.toObject(response);
        });
    }
    set(index, element) {
        return this.encodeInvoke(ListSetCodec_1.ListSetCodec, index, this.toData(element))
            .then((clientMessage) => {
            const response = ListSetCodec_1.ListSetCodec.decodeResponse(clientMessage);
            return this.toObject(response);
        });
    }
    indexOf(element) {
        return this.encodeInvoke(ListIndexOfCodec_1.ListIndexOfCodec, this.toData(element))
            .then(ListIndexOfCodec_1.ListIndexOfCodec.decodeResponse);
    }
    lastIndexOf(element) {
        return this.encodeInvoke(ListLastIndexOfCodec_1.ListLastIndexOfCodec, this.toData(element))
            .then(ListLastIndexOfCodec_1.ListLastIndexOfCodec.decodeResponse);
    }
    size() {
        return this.encodeInvoke(ListSizeCodec_1.ListSizeCodec)
            .then(ListSizeCodec_1.ListSizeCodec.decodeResponse);
    }
    subList(start, end) {
        return this.encodeInvoke(ListSubCodec_1.ListSubCodec, start, end)
            .then((clientMessage) => {
            const response = ListSubCodec_1.ListSubCodec.decodeResponse(clientMessage);
            return new core_1.ReadOnlyLazyList(response, this.client.getSerializationService());
        });
    }
    toArray() {
        return this.encodeInvoke(ListGetAllCodec_1.ListGetAllCodec)
            .then((clientMessage) => {
            const response = ListGetAllCodec_1.ListGetAllCodec.decodeResponse(clientMessage);
            return response.map(this.toObject.bind(this));
        });
    }
    addItemListener(listener, includeValue) {
        const listenerHandler = (message) => {
            ListAddListenerCodec_1.ListAddListenerCodec.handle(message, (element, uuid, eventType) => {
                const responseObject = element ? this.toObject(element) : null;
                const member = this.client.getClusterService().getMember(uuid);
                const name = this.name;
                const itemEvent = new ItemListener_1.ItemEvent(name, eventType, responseObject, member);
                if (eventType === ItemListener_1.ItemEventType.ADDED && listener.itemAdded) {
                    listener.itemAdded.apply(null, [itemEvent]);
                }
                else if (eventType === ItemListener_1.ItemEventType.REMOVED && listener.itemRemoved) {
                    listener.itemRemoved.apply(null, [itemEvent]);
                }
            });
        };
        const codec = this.createItemListener(this.name, includeValue);
        return this.client.getListenerService().registerListener(codec, listenerHandler);
    }
    removeItemListener(registrationId) {
        return this.client.getListenerService().deregisterListener(registrationId);
    }
    serializeList(input) {
        return input.map((each) => {
            return this.toData(each);
        });
    }
    createItemListener(name, includeValue) {
        return {
            encodeAddRequest(localOnly) {
                return ListAddListenerCodec_1.ListAddListenerCodec.encodeRequest(name, includeValue, localOnly);
            },
            decodeAddResponse(msg) {
                return ListAddListenerCodec_1.ListAddListenerCodec.decodeResponse(msg);
            },
            encodeRemoveRequest(listenerId) {
                return ListRemoveListenerCodec_1.ListRemoveListenerCodec.encodeRequest(name, listenerId);
            },
        };
    }
}
exports.ListProxy = ListProxy;

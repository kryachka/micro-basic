"use strict";
/*
 * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/** @ignore */ /** */
Object.defineProperty(exports, "__esModule", { value: true });
exports.timedPromise = exports.delayedPromise = exports.deferredPromise = exports.cancelRepetitionTask = exports.scheduleWithRepetition = exports.Task = exports.randomInt = exports.resolvePath = exports.tryGetEnum = exports.getBooleanOrUndefined = exports.getStringOrUndefined = exports.tryGetString = exports.tryGetArray = exports.tryGetNumber = exports.tryGetBoolean = exports.enumFromString = exports.getType = exports.shuffleArray = exports.assertPositiveNumber = exports.assertNonNegativeNumber = exports.assertNumber = exports.assertString = exports.assertArray = exports.assertNotNull = void 0;
const assert = require("assert");
const Long = require("long");
const Path = require("path");
const core_1 = require("../core");
/** @internal */
function assertNotNull(v) {
    assert.notEqual(v, null, 'Non null value expected.');
}
exports.assertNotNull = assertNotNull;
/** @internal */
function assertArray(x) {
    assert(Array.isArray(x), 'Should be array.');
}
exports.assertArray = assertArray;
/** @internal */
function assertString(v) {
    assert(typeof v === 'string', 'String value expected.');
}
exports.assertString = assertString;
/** @internal */
function assertNumber(v) {
    assert(typeof v === 'number', 'Number value expected.');
}
exports.assertNumber = assertNumber;
/** @internal */
function assertNonNegativeNumber(v, m) {
    assert(typeof v === 'number', m || 'Number value expected.');
    assert(v >= 0, m || 'Non-negative value expected.');
}
exports.assertNonNegativeNumber = assertNonNegativeNumber;
/** @internal */
function assertPositiveNumber(v, m) {
    assert(typeof v === 'number', m || 'Number value expected.');
    assert(v > 0, m || 'Positive value expected.');
}
exports.assertPositiveNumber = assertPositiveNumber;
/** @internal */
function shuffleArray(array) {
    let randomIndex;
    let temp;
    for (let i = array.length; i > 1; i--) {
        randomIndex = Math.floor(Math.random() * i);
        temp = array[i - 1];
        array[i - 1] = array[randomIndex];
        array[randomIndex] = temp;
    }
}
exports.shuffleArray = shuffleArray;
/** @internal */
function getType(obj) {
    assertNotNull(obj);
    if (Long.isLong(obj)) {
        return 'long';
    }
    if (Buffer.isBuffer(obj)) {
        return 'buffer';
    }
    if (core_1.UUID.isUUID(obj)) {
        return 'uuid';
    }
    else {
        const t = typeof obj;
        if (t !== 'object') {
            return t;
        }
        else {
            return ({}).toString.call(obj).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
        }
    }
}
exports.getType = getType;
/** @internal */
function enumFromString(enumType, value) {
    return enumType[value];
}
exports.enumFromString = enumFromString;
/** @internal */
function tryGetBoolean(val) {
    if (typeof val === 'boolean') {
        return val;
    }
    else {
        throw new RangeError(val + ' is not a boolean.');
    }
}
exports.tryGetBoolean = tryGetBoolean;
/** @internal */
function tryGetNumber(val) {
    if (typeof val === 'number') {
        return val;
    }
    else {
        throw new RangeError(val + ' is not a number.');
    }
}
exports.tryGetNumber = tryGetNumber;
/** @internal */
function tryGetArray(val) {
    if (Array.isArray(val)) {
        return val;
    }
    else {
        throw new RangeError(val + ' is not an array.');
    }
}
exports.tryGetArray = tryGetArray;
/** @internal */
function tryGetString(val) {
    if (typeof val === 'string') {
        return val;
    }
    else {
        throw new RangeError(val + ' is not a string.');
    }
}
exports.tryGetString = tryGetString;
/** @internal */
function getStringOrUndefined(val) {
    try {
        return tryGetString(val);
    }
    catch (e) {
        return undefined;
    }
}
exports.getStringOrUndefined = getStringOrUndefined;
/** @internal */
function getBooleanOrUndefined(val) {
    try {
        return tryGetBoolean(val);
    }
    catch (e) {
        return undefined;
    }
}
exports.getBooleanOrUndefined = getBooleanOrUndefined;
/** @internal */
function tryGetEnum(enumClass, str) {
    const result = enumClass[str.toUpperCase()];
    if (result == null) {
        throw new TypeError(str + ' is not a member of the enum ' + enumClass);
    }
    return result;
}
exports.tryGetEnum = tryGetEnum;
/** @internal */
function resolvePath(path) {
    const basePath = process.cwd();
    return Path.resolve(basePath, path);
}
exports.resolvePath = resolvePath;
/**
 * Returns a random integer between `0` (inclusive) and `upperBound` (exclusive).
 * Upper bound should be an integer.
 * @param upperBound
 * @returns A random integer between [0-upperBound)
 * @internal
 */
function randomInt(upperBound) {
    return Math.floor(Math.random() * upperBound);
}
exports.randomInt = randomInt;
/** @internal */
class Task {
}
exports.Task = Task;
/** @internal */
function scheduleWithRepetition(callback, initialDelayMs, periodMs) {
    const task = new Task();
    task.timeoutId = setTimeout(() => {
        callback();
        task.intervalId = setInterval(callback, periodMs);
    }, initialDelayMs);
    return task;
}
exports.scheduleWithRepetition = scheduleWithRepetition;
/** @internal */
function cancelRepetitionTask(task) {
    if (task.intervalId !== undefined) {
        clearInterval(task.intervalId);
    }
    else if (task.timeoutId !== undefined) {
        clearTimeout(task.timeoutId);
    }
}
exports.cancelRepetitionTask = cancelRepetitionTask;
/**
 * Returns a deferred promise.
 * @internal
 */
function deferredPromise() {
    let resolve;
    let reject;
    const promise = new Promise(function () {
        resolve = arguments[0];
        reject = arguments[1];
    });
    return {
        resolve,
        reject,
        promise
    };
}
exports.deferredPromise = deferredPromise;
/**
 * Returns a promise that is resolved after the specified timeout.
 * @param timeout timeout in milliseconds.
 * @internal
 */
function delayedPromise(timeout) {
    return new Promise((resolve) => setTimeout(resolve, timeout));
}
exports.delayedPromise = delayedPromise;
/**
 * Returns a Promise that will be fulfilled with the wrapped promise's
 * resolve value or rejection reason. However, if the wrapped promise is
 * not resolved or rejected within the given timeout, the returned
 * promise is rejected with an `Error` or the given error.
 *
 * @param wrapped wrapped promise
 * @param timeout timeout in millisecond
 * @param err optional error for the timeout case
 * @internal
 */
function timedPromise(wrapped, timeout, err) {
    const deferred = deferredPromise();
    let timed = false;
    const timer = setTimeout(() => {
        if (err) {
            deferred.reject(err);
        }
        else {
            deferred.reject(new Error('Operation did not finish within timeout: ' + timeout));
        }
        timed = true;
    }, timeout);
    wrapped.then((result) => {
        if (!timed) {
            deferred.resolve(result);
            clearTimeout(timer);
        }
    }).catch((err) => {
        if (!timed) {
            deferred.reject(err);
            clearTimeout(timer);
        }
    });
    return deferred.promise;
}
exports.timedPromise = timedPromise;

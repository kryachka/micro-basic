"use strict";
/*
 * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/** @ignore */ /** */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MapProxy = void 0;
const MapAddEntryListenerCodec_1 = require("../codec/MapAddEntryListenerCodec");
const MapAddEntryListenerToKeyCodec_1 = require("../codec/MapAddEntryListenerToKeyCodec");
const MapAddEntryListenerToKeyWithPredicateCodec_1 = require("../codec/MapAddEntryListenerToKeyWithPredicateCodec");
const MapAddEntryListenerWithPredicateCodec_1 = require("../codec/MapAddEntryListenerWithPredicateCodec");
const MapAddIndexCodec_1 = require("../codec/MapAddIndexCodec");
const MapAggregateCodec_1 = require("../codec/MapAggregateCodec");
const MapAggregateWithPredicateCodec_1 = require("../codec/MapAggregateWithPredicateCodec");
const MapClearCodec_1 = require("../codec/MapClearCodec");
const MapContainsKeyCodec_1 = require("../codec/MapContainsKeyCodec");
const MapContainsValueCodec_1 = require("../codec/MapContainsValueCodec");
const MapDeleteCodec_1 = require("../codec/MapDeleteCodec");
const MapEntriesWithPredicateCodec_1 = require("../codec/MapEntriesWithPredicateCodec");
const MapEntrySetCodec_1 = require("../codec/MapEntrySetCodec");
const MapEvictAllCodec_1 = require("../codec/MapEvictAllCodec");
const MapEvictCodec_1 = require("../codec/MapEvictCodec");
const MapExecuteOnAllKeysCodec_1 = require("../codec/MapExecuteOnAllKeysCodec");
const MapExecuteOnKeyCodec_1 = require("../codec/MapExecuteOnKeyCodec");
const MapExecuteOnKeysCodec_1 = require("../codec/MapExecuteOnKeysCodec");
const MapExecuteWithPredicateCodec_1 = require("../codec/MapExecuteWithPredicateCodec");
const MapFlushCodec_1 = require("../codec/MapFlushCodec");
const MapForceUnlockCodec_1 = require("../codec/MapForceUnlockCodec");
const MapGetAllCodec_1 = require("../codec/MapGetAllCodec");
const MapGetCodec_1 = require("../codec/MapGetCodec");
const MapGetEntryViewCodec_1 = require("../codec/MapGetEntryViewCodec");
const MapIsEmptyCodec_1 = require("../codec/MapIsEmptyCodec");
const MapIsLockedCodec_1 = require("../codec/MapIsLockedCodec");
const MapKeySetCodec_1 = require("../codec/MapKeySetCodec");
const MapKeySetWithPagingPredicateCodec_1 = require("../codec/MapKeySetWithPagingPredicateCodec");
const MapKeySetWithPredicateCodec_1 = require("../codec/MapKeySetWithPredicateCodec");
const MapLoadAllCodec_1 = require("../codec/MapLoadAllCodec");
const MapLoadGivenKeysCodec_1 = require("../codec/MapLoadGivenKeysCodec");
const MapLockCodec_1 = require("../codec/MapLockCodec");
const MapPutAllCodec_1 = require("../codec/MapPutAllCodec");
const MapPutCodec_1 = require("../codec/MapPutCodec");
const MapPutWithMaxIdleCodec_1 = require("../codec/MapPutWithMaxIdleCodec");
const MapPutIfAbsentCodec_1 = require("../codec/MapPutIfAbsentCodec");
const MapPutIfAbsentWithMaxIdleCodec_1 = require("../codec/MapPutIfAbsentWithMaxIdleCodec");
const MapPutTransientCodec_1 = require("../codec/MapPutTransientCodec");
const MapPutTransientWithMaxIdleCodec_1 = require("../codec/MapPutTransientWithMaxIdleCodec");
const MapRemoveCodec_1 = require("../codec/MapRemoveCodec");
const MapRemoveEntryListenerCodec_1 = require("../codec/MapRemoveEntryListenerCodec");
const MapRemoveIfSameCodec_1 = require("../codec/MapRemoveIfSameCodec");
const MapReplaceCodec_1 = require("../codec/MapReplaceCodec");
const MapReplaceIfSameCodec_1 = require("../codec/MapReplaceIfSameCodec");
const MapSetCodec_1 = require("../codec/MapSetCodec");
const MapSetWithMaxIdleCodec_1 = require("../codec/MapSetWithMaxIdleCodec");
const MapSetTtlCodec_1 = require("../codec/MapSetTtlCodec");
const MapSizeCodec_1 = require("../codec/MapSizeCodec");
const MapTryLockCodec_1 = require("../codec/MapTryLockCodec");
const MapTryPutCodec_1 = require("../codec/MapTryPutCodec");
const MapTryRemoveCodec_1 = require("../codec/MapTryRemoveCodec");
const MapUnlockCodec_1 = require("../codec/MapUnlockCodec");
const MapValuesCodec_1 = require("../codec/MapValuesCodec");
const MapValuesWithPagingPredicateCodec_1 = require("../codec/MapValuesWithPagingPredicateCodec");
const MapValuesWithPredicateCodec_1 = require("../codec/MapValuesWithPredicateCodec");
const EventType_1 = require("./EventType");
const SimpleEntryView_1 = require("../core/SimpleEntryView");
const MapListener_1 = require("./MapListener");
const Predicate_1 = require("../core/Predicate");
const ReadOnlyLazyList_1 = require("../core/ReadOnlyLazyList");
const DefaultPredicates_1 = require("../serialization/DefaultPredicates");
const SerializationUtil = require("../serialization/SerializationUtil");
const Util_1 = require("../util/Util");
const BaseProxy_1 = require("./BaseProxy");
const EntryListener_1 = require("./EntryListener");
const IndexUtil_1 = require("../util/IndexUtil");
const PagingPredicateHolder_1 = require("../protocol/PagingPredicateHolder");
const MapEntriesWithPagingPredicateCodec_1 = require("../codec/MapEntriesWithPagingPredicateCodec");
/** @internal */
class MapProxy extends BaseProxy_1.BaseProxy {
    aggregate(aggregator) {
        Util_1.assertNotNull(aggregator);
        const aggregatorData = this.toData(aggregator);
        return this.encodeInvokeOnRandomTarget(MapAggregateCodec_1.MapAggregateCodec, aggregatorData)
            .then((clientMessage) => {
            const response = MapAggregateCodec_1.MapAggregateCodec.decodeResponse(clientMessage);
            return this.toObject(response);
        });
    }
    aggregateWithPredicate(aggregator, predicate) {
        Util_1.assertNotNull(aggregator);
        Util_1.assertNotNull(predicate);
        this.checkNotPagingPredicate(predicate);
        const aggregatorData = this.toData(aggregator);
        const predicateData = this.toData(predicate);
        return this.encodeInvokeOnRandomTarget(MapAggregateWithPredicateCodec_1.MapAggregateWithPredicateCodec, aggregatorData, predicateData)
            .then((clientMessage) => {
            const response = MapAggregateWithPredicateCodec_1.MapAggregateWithPredicateCodec.decodeResponse(clientMessage);
            return this.toObject(response);
        });
    }
    executeOnKeys(keys, entryProcessor) {
        Util_1.assertNotNull(keys);
        Util_1.assertArray(keys);
        if (keys.length === 0) {
            return Promise.resolve([]);
        }
        else {
            const toObject = this.toObject.bind(this);
            const keysData = SerializationUtil.serializeList(this.toData.bind(this), keys);
            const proData = this.toData(entryProcessor);
            return this.encodeInvokeOnRandomTarget(MapExecuteOnKeysCodec_1.MapExecuteOnKeysCodec, proData, keysData)
                .then((clientMessage) => {
                const response = MapExecuteOnKeysCodec_1.MapExecuteOnKeysCodec.decodeResponse(clientMessage);
                return SerializationUtil.deserializeEntryList(toObject, response);
            });
        }
    }
    executeOnKey(key, entryProcessor) {
        Util_1.assertNotNull(key);
        Util_1.assertNotNull(entryProcessor);
        const keyData = this.toData(key);
        const proData = this.toData(entryProcessor);
        return this.executeOnKeyInternal(keyData, proData);
    }
    executeOnEntries(entryProcessor, predicate = null) {
        Util_1.assertNotNull(entryProcessor);
        const proData = this.toData(entryProcessor);
        const toObject = this.toObject.bind(this);
        if (predicate == null) {
            return this.encodeInvokeOnRandomTarget(MapExecuteOnAllKeysCodec_1.MapExecuteOnAllKeysCodec, proData)
                .then((clientMessage) => {
                const response = MapExecuteOnAllKeysCodec_1.MapExecuteOnAllKeysCodec.decodeResponse(clientMessage);
                return SerializationUtil.deserializeEntryList(toObject, response);
            });
        }
        else {
            const predData = this.toData(predicate);
            return this.encodeInvokeOnRandomTarget(MapExecuteWithPredicateCodec_1.MapExecuteWithPredicateCodec, proData, predData)
                .then((clientMessage) => {
                const response = MapExecuteWithPredicateCodec_1.MapExecuteWithPredicateCodec.decodeResponse(clientMessage);
                return SerializationUtil.deserializeEntryList(toObject, response);
            });
        }
    }
    entrySetWithPredicate(predicate) {
        Util_1.assertNotNull(predicate);
        const toObject = this.toObject.bind(this);
        if (predicate instanceof DefaultPredicates_1.PagingPredicateImpl) {
            predicate.setIterationType(Predicate_1.IterationType.ENTRY);
            const serializationService = this.client.getSerializationService();
            const pagingPredicateHolder = PagingPredicateHolder_1.PagingPredicateHolder.of(predicate, serializationService);
            return this.encodeInvokeOnRandomTarget(MapEntriesWithPagingPredicateCodec_1.MapEntriesWithPagingPredicateCodec, pagingPredicateHolder)
                .then((clientMessage) => {
                const response = MapEntriesWithPagingPredicateCodec_1.MapEntriesWithPagingPredicateCodec.decodeResponse(clientMessage);
                predicate.setAnchorList(response.anchorDataList.asAnchorList(serializationService));
                return SerializationUtil.deserializeEntryList(toObject, response.response);
            });
        }
        else {
            const pData = this.toData(predicate);
            return this.encodeInvokeOnRandomTarget(MapEntriesWithPredicateCodec_1.MapEntriesWithPredicateCodec, pData)
                .then((clientMessage) => {
                const response = MapEntriesWithPredicateCodec_1.MapEntriesWithPredicateCodec.decodeResponse(clientMessage);
                return SerializationUtil.deserializeEntryList(toObject, response);
            });
        }
    }
    keySetWithPredicate(predicate) {
        Util_1.assertNotNull(predicate);
        const toObject = this.toObject.bind(this);
        if (predicate instanceof DefaultPredicates_1.PagingPredicateImpl) {
            predicate.setIterationType(Predicate_1.IterationType.KEY);
            const serializationService = this.client.getSerializationService();
            const pagingPredicateHolder = PagingPredicateHolder_1.PagingPredicateHolder.of(predicate, serializationService);
            return this.encodeInvokeOnRandomTarget(MapKeySetWithPagingPredicateCodec_1.MapKeySetWithPagingPredicateCodec, pagingPredicateHolder)
                .then((clientMessage) => {
                const response = MapKeySetWithPagingPredicateCodec_1.MapKeySetWithPagingPredicateCodec.decodeResponse(clientMessage);
                predicate.setAnchorList(response.anchorDataList.asAnchorList(serializationService));
                return response.response.map(toObject);
            });
        }
        else {
            const predicateData = this.toData(predicate);
            return this.encodeInvokeOnRandomTarget(MapKeySetWithPredicateCodec_1.MapKeySetWithPredicateCodec, predicateData)
                .then((clientMessage) => {
                const response = MapKeySetWithPredicateCodec_1.MapKeySetWithPredicateCodec.decodeResponse(clientMessage);
                return response.map(toObject);
            });
        }
    }
    valuesWithPredicate(predicate) {
        Util_1.assertNotNull(predicate);
        if (predicate instanceof DefaultPredicates_1.PagingPredicateImpl) {
            predicate.setIterationType(Predicate_1.IterationType.VALUE);
            const serializationService = this.client.getSerializationService();
            const pagingPredicateHolder = PagingPredicateHolder_1.PagingPredicateHolder.of(predicate, serializationService);
            return this.encodeInvokeOnRandomTarget(MapValuesWithPagingPredicateCodec_1.MapValuesWithPagingPredicateCodec, pagingPredicateHolder)
                .then((clientMessage) => {
                const response = MapValuesWithPagingPredicateCodec_1.MapValuesWithPagingPredicateCodec.decodeResponse(clientMessage);
                predicate.setAnchorList(response.anchorDataList.asAnchorList(serializationService));
                return new ReadOnlyLazyList_1.ReadOnlyLazyList(response.response, serializationService);
            });
        }
        else {
            const predicateData = this.toData(predicate);
            return this.encodeInvokeOnRandomTarget(MapValuesWithPredicateCodec_1.MapValuesWithPredicateCodec, predicateData)
                .then((clientMessage) => {
                const response = MapValuesWithPredicateCodec_1.MapValuesWithPredicateCodec.decodeResponse(clientMessage);
                return new ReadOnlyLazyList_1.ReadOnlyLazyList(response, this.client.getSerializationService());
            });
        }
    }
    addEntryListenerWithPredicate(listener, predicate, key, includeValue) {
        return this.addEntryListenerInternal(listener, predicate, key, includeValue);
    }
    containsKey(key) {
        Util_1.assertNotNull(key);
        const keyData = this.toData(key);
        return this.containsKeyInternal(keyData);
    }
    containsValue(value) {
        Util_1.assertNotNull(value);
        const valueData = this.toData(value);
        return this.encodeInvokeOnRandomTarget(MapContainsValueCodec_1.MapContainsValueCodec, valueData)
            .then(MapContainsValueCodec_1.MapContainsValueCodec.decodeResponse);
    }
    put(key, value, ttl, maxIdle) {
        Util_1.assertNotNull(key);
        Util_1.assertNotNull(value);
        const keyData = this.toData(key);
        const valueData = this.toData(value);
        return this.putInternal(keyData, valueData, ttl, maxIdle);
    }
    putAll(pairs) {
        return this.putAllInternal(pairs, true);
    }
    setAll(pairs) {
        return this.putAllInternal(pairs, false);
    }
    get(key) {
        Util_1.assertNotNull(key);
        const keyData = this.toData(key);
        return this.getInternal(keyData);
    }
    remove(key, value = null) {
        Util_1.assertNotNull(key);
        const keyData = this.toData(key);
        return this.removeInternal(keyData, value);
    }
    size() {
        return this.encodeInvokeOnRandomTarget(MapSizeCodec_1.MapSizeCodec)
            .then(MapSizeCodec_1.MapSizeCodec.decodeResponse);
    }
    clear() {
        return this.encodeInvokeOnRandomTarget(MapClearCodec_1.MapClearCodec).then(() => { });
    }
    isEmpty() {
        return this.encodeInvokeOnRandomTarget(MapIsEmptyCodec_1.MapIsEmptyCodec)
            .then(MapIsEmptyCodec_1.MapIsEmptyCodec.decodeResponse);
    }
    getAll(keys) {
        Util_1.assertNotNull(keys);
        Util_1.assertArray(keys);
        const partitionService = this.client.getPartitionService();
        const partitionsToKeys = {};
        let key;
        for (const i in keys) {
            key = keys[i];
            const keyData = this.toData(key);
            const pId = partitionService.getPartitionId(keyData);
            if (!partitionsToKeys[pId]) {
                partitionsToKeys[pId] = [];
            }
            partitionsToKeys[pId].push(keyData);
        }
        const result = [];
        return this.getAllInternal(partitionsToKeys, result).then(() => result);
    }
    delete(key) {
        Util_1.assertNotNull(key);
        const keyData = this.toData(key);
        return this.deleteInternal(keyData);
    }
    entrySet() {
        return this.encodeInvokeOnRandomTarget(MapEntrySetCodec_1.MapEntrySetCodec)
            .then((clientMessage) => {
            const response = MapEntrySetCodec_1.MapEntrySetCodec.decodeResponse(clientMessage);
            return SerializationUtil.deserializeEntryList(this.toObject.bind(this), response);
        });
    }
    evict(key) {
        Util_1.assertNotNull(key);
        const keyData = this.toData(key);
        return this.evictInternal(keyData);
    }
    evictAll() {
        return this.encodeInvokeOnRandomTarget(MapEvictAllCodec_1.MapEvictAllCodec).then(() => { });
    }
    flush() {
        return this.encodeInvokeOnRandomTarget(MapFlushCodec_1.MapFlushCodec).then(() => { });
    }
    lock(key, leaseTime = -1) {
        Util_1.assertNotNull(key);
        const keyData = this.toData(key);
        return this.encodeInvokeOnKeyWithTimeout(Number.MAX_SAFE_INTEGER, MapLockCodec_1.MapLockCodec, keyData, keyData, 0, leaseTime, 0).then(() => { });
    }
    isLocked(key) {
        Util_1.assertNotNull(key);
        const keyData = this.toData(key);
        return this.encodeInvokeOnKey(MapIsLockedCodec_1.MapIsLockedCodec, keyData, keyData)
            .then(MapIsLockedCodec_1.MapIsLockedCodec.decodeResponse);
    }
    unlock(key) {
        Util_1.assertNotNull(key);
        const keyData = this.toData(key);
        return this.encodeInvokeOnKey(MapUnlockCodec_1.MapUnlockCodec, keyData, keyData, 0, 0).then(() => { });
    }
    forceUnlock(key) {
        Util_1.assertNotNull(key);
        const keyData = this.toData(key);
        return this.encodeInvokeOnKey(MapForceUnlockCodec_1.MapForceUnlockCodec, keyData, keyData, 0).then(() => { });
    }
    keySet() {
        return this.encodeInvokeOnRandomTarget(MapKeySetCodec_1.MapKeySetCodec)
            .then((clientMessage) => {
            const response = MapKeySetCodec_1.MapKeySetCodec.decodeResponse(clientMessage);
            return response.map(this.toObject.bind(this));
        });
    }
    loadAll(keys = null, replaceExistingValues = true) {
        if (keys == null) {
            return this.encodeInvokeOnRandomTarget(MapLoadAllCodec_1.MapLoadAllCodec, replaceExistingValues)
                .then(() => { });
        }
        else {
            const toData = this.toData.bind(this);
            const keysData = keys.map(toData);
            return this.encodeInvokeOnRandomTarget(MapLoadGivenKeysCodec_1.MapLoadGivenKeysCodec, keysData, replaceExistingValues)
                .then(() => { });
        }
    }
    putIfAbsent(key, value, ttl, maxIdle) {
        Util_1.assertNotNull(key);
        Util_1.assertNotNull(value);
        const keyData = this.toData(key);
        const valueData = this.toData(value);
        return this.putIfAbsentInternal(keyData, valueData, ttl, maxIdle);
    }
    putTransient(key, value, ttl, maxIdle) {
        Util_1.assertNotNull(key);
        Util_1.assertNotNull(value);
        const keyData = this.toData(key);
        const valueData = this.toData(value);
        return this.putTransientInternal(keyData, valueData, ttl, maxIdle);
    }
    replace(key, newValue) {
        Util_1.assertNotNull(key);
        Util_1.assertNotNull(newValue);
        const keyData = this.toData(key);
        const newValueData = this.toData(newValue);
        return this.replaceInternal(keyData, newValueData);
    }
    replaceIfSame(key, oldValue, newValue) {
        Util_1.assertNotNull(key);
        Util_1.assertNotNull(oldValue);
        Util_1.assertNotNull(newValue);
        const keyData = this.toData(key);
        const newValueData = this.toData(newValue);
        const oldValueData = this.toData(oldValue);
        return this.replaceIfSameInternal(keyData, oldValueData, newValueData);
    }
    set(key, value, ttl, maxIdle) {
        Util_1.assertNotNull(key);
        Util_1.assertNotNull(value);
        const keyData = this.toData(key);
        const valueData = this.toData(value);
        return this.setInternal(keyData, valueData, ttl, maxIdle);
    }
    values() {
        return this.encodeInvokeOnRandomTarget(MapValuesCodec_1.MapValuesCodec)
            .then((clientMessage) => {
            const response = MapValuesCodec_1.MapValuesCodec.decodeResponse(clientMessage);
            return new ReadOnlyLazyList_1.ReadOnlyLazyList(response, this.client.getSerializationService());
        });
    }
    getEntryView(key) {
        Util_1.assertNotNull(key);
        const keyData = this.toData(key);
        return this.encodeInvokeOnKey(MapGetEntryViewCodec_1.MapGetEntryViewCodec, keyData, keyData, 0)
            .then((clientMessage) => {
            const response = MapGetEntryViewCodec_1.MapGetEntryViewCodec.decodeResponse(clientMessage);
            const dataEntryView = response.response;
            if (dataEntryView == null) {
                return null;
            }
            return new SimpleEntryView_1.SimpleEntryView(this.toObject(dataEntryView.key), this.toObject(dataEntryView.value), dataEntryView.cost, dataEntryView.creationTime, dataEntryView.expirationTime, dataEntryView.hits, dataEntryView.lastAccessTime, dataEntryView.lastStoredTime, dataEntryView.lastUpdateTime, dataEntryView.version, dataEntryView.ttl, response.maxIdle);
        });
    }
    addIndex(indexConfig) {
        Util_1.assertNotNull(indexConfig);
        const normalizedConfig = IndexUtil_1.IndexUtil.validateAndNormalize(this.name, indexConfig);
        return this.encodeInvokeOnRandomTarget(MapAddIndexCodec_1.MapAddIndexCodec, normalizedConfig).then(() => { });
    }
    tryLock(key, timeout = 0, leaseTime = -1) {
        Util_1.assertNotNull(key);
        const keyData = this.toData(key);
        return this.encodeInvokeOnKeyWithTimeout(Number.MAX_SAFE_INTEGER, MapTryLockCodec_1.MapTryLockCodec, keyData, keyData, 0, leaseTime, timeout, 0).then(MapTryLockCodec_1.MapTryLockCodec.decodeResponse);
    }
    tryPut(key, value, timeout) {
        Util_1.assertNotNull(key);
        Util_1.assertNotNull(value);
        Util_1.assertNotNull(timeout);
        const keyData = this.toData(key);
        const valueData = this.toData(value);
        return this.tryPutInternal(keyData, valueData, timeout);
    }
    tryRemove(key, timeout) {
        Util_1.assertNotNull(key);
        Util_1.assertNotNull(timeout);
        const keyData = this.toData(key);
        return this.tryRemoveInternal(keyData, timeout);
    }
    addEntryListener(listener, key, includeValue = false) {
        return this.addEntryListenerInternal(listener, undefined, key, includeValue);
    }
    removeEntryListener(listenerId) {
        return this.client.getListenerService().deregisterListener(listenerId);
    }
    setTtl(key, ttl) {
        Util_1.assertNotNull(key);
        Util_1.assertNotNull(ttl);
        const keyData = this.toData(key);
        return this.setTtlInternal(keyData, ttl);
    }
    executeOnKeyInternal(keyData, proData) {
        return this.encodeInvokeOnKey(MapExecuteOnKeyCodec_1.MapExecuteOnKeyCodec, keyData, proData, keyData, 1)
            .then((clientMessage) => {
            const response = MapExecuteOnKeyCodec_1.MapExecuteOnKeyCodec.decodeResponse(clientMessage);
            return this.toObject(response);
        });
    }
    containsKeyInternal(keyData) {
        return this.encodeInvokeOnKey(MapContainsKeyCodec_1.MapContainsKeyCodec, keyData, keyData, 0)
            .then(MapContainsKeyCodec_1.MapContainsKeyCodec.decodeResponse);
    }
    putInternal(keyData, valueData, ttl = -1, maxIdle) {
        let request;
        if (maxIdle !== undefined) {
            request = this.encodeInvokeOnKey(MapPutWithMaxIdleCodec_1.MapPutWithMaxIdleCodec, keyData, keyData, valueData, 0, ttl, maxIdle);
        }
        else {
            request = this.encodeInvokeOnKey(MapPutCodec_1.MapPutCodec, keyData, keyData, valueData, 0, ttl);
        }
        return request
            .then((clientMessage) => {
            const response = MapPutCodec_1.MapPutCodec.decodeResponse(clientMessage);
            return this.toObject(response);
        });
    }
    finalizePutAll(partitionsToKeys) {
        // No-op
    }
    getInternal(keyData) {
        return this.encodeInvokeOnKey(MapGetCodec_1.MapGetCodec, keyData, keyData, 0)
            .then((clientMessage) => {
            const response = MapGetCodec_1.MapGetCodec.decodeResponse(clientMessage);
            return this.toObject(response);
        });
    }
    removeInternal(keyData, value = null) {
        if (value == null) {
            return this.encodeInvokeOnKey(MapRemoveCodec_1.MapRemoveCodec, keyData, keyData, 0)
                .then((clientMessage) => {
                const response = MapRemoveCodec_1.MapRemoveCodec.decodeResponse(clientMessage);
                return this.toObject(response);
            });
        }
        else {
            const valueData = this.toData(value);
            return this.encodeInvokeOnKey(MapRemoveIfSameCodec_1.MapRemoveIfSameCodec, keyData, keyData, valueData, 0)
                .then(MapRemoveIfSameCodec_1.MapRemoveIfSameCodec.decodeResponse);
        }
    }
    getAllInternal(partitionsToKeys, result = []) {
        const partitionPromises = [];
        for (const partition in partitionsToKeys) {
            partitionPromises.push(this.encodeInvokeOnPartition(MapGetAllCodec_1.MapGetAllCodec, Number(partition), partitionsToKeys[partition])
                .then(MapGetAllCodec_1.MapGetAllCodec.decodeResponse));
        }
        const toObject = this.toObject.bind(this);
        const deserializeEntry = function (entry) {
            return [toObject(entry[0]), toObject(entry[1])];
        };
        return Promise.all(partitionPromises)
            .then(function (serializedEntryArrayArray) {
            const serializedEntryArray = Array.prototype.concat.apply([], serializedEntryArrayArray);
            result.push(...(serializedEntryArray.map(deserializeEntry)));
            return serializedEntryArray;
        });
    }
    deleteInternal(keyData) {
        return this.encodeInvokeOnKey(MapDeleteCodec_1.MapDeleteCodec, keyData, keyData, 0).then(() => { });
    }
    evictInternal(keyData) {
        return this.encodeInvokeOnKey(MapEvictCodec_1.MapEvictCodec, keyData, keyData, 0)
            .then(MapEvictCodec_1.MapEvictCodec.decodeResponse);
    }
    putIfAbsentInternal(keyData, valueData, ttl = -1, maxIdle) {
        let request;
        if (maxIdle !== undefined) {
            request = this.encodeInvokeOnKey(MapPutIfAbsentWithMaxIdleCodec_1.MapPutIfAbsentWithMaxIdleCodec, keyData, keyData, valueData, 0, ttl, maxIdle);
        }
        else {
            request = this.encodeInvokeOnKey(MapPutIfAbsentCodec_1.MapPutIfAbsentCodec, keyData, keyData, valueData, 0, ttl);
        }
        return request
            .then((clientMessage) => {
            const response = MapPutIfAbsentCodec_1.MapPutIfAbsentCodec.decodeResponse(clientMessage);
            return this.toObject(response);
        });
    }
    putTransientInternal(keyData, valueData, ttl = -1, maxIdle) {
        let request;
        if (maxIdle !== undefined) {
            request = this.encodeInvokeOnKey(MapPutTransientWithMaxIdleCodec_1.MapPutTransientWithMaxIdleCodec, keyData, keyData, valueData, 0, ttl, maxIdle);
        }
        else {
            request = this.encodeInvokeOnKey(MapPutTransientCodec_1.MapPutTransientCodec, keyData, keyData, valueData, 0, ttl);
        }
        return request.then(() => { });
    }
    replaceInternal(keyData, newValueData) {
        return this.encodeInvokeOnKey(MapReplaceCodec_1.MapReplaceCodec, keyData, keyData, newValueData, 0)
            .then((clientMessage) => {
            const response = MapReplaceCodec_1.MapReplaceCodec.decodeResponse(clientMessage);
            return this.toObject(response);
        });
    }
    replaceIfSameInternal(keyData, oldValueData, newValueData) {
        return this.encodeInvokeOnKey(MapReplaceIfSameCodec_1.MapReplaceIfSameCodec, keyData, keyData, oldValueData, newValueData, 0)
            .then(MapReplaceIfSameCodec_1.MapReplaceIfSameCodec.decodeResponse);
    }
    setInternal(keyData, valueData, ttl = -1, maxIdle) {
        let request;
        if (maxIdle !== undefined) {
            request = this.encodeInvokeOnKey(MapSetWithMaxIdleCodec_1.MapSetWithMaxIdleCodec, keyData, keyData, valueData, 0, ttl, maxIdle);
        }
        else {
            request = this.encodeInvokeOnKey(MapSetCodec_1.MapSetCodec, keyData, keyData, valueData, 0, ttl);
        }
        return request.then(() => { });
    }
    tryPutInternal(keyData, valueData, timeout) {
        return this.encodeInvokeOnKey(MapTryPutCodec_1.MapTryPutCodec, keyData, keyData, valueData, 0, timeout)
            .then(MapTryPutCodec_1.MapTryPutCodec.decodeResponse);
    }
    tryRemoveInternal(keyData, timeout) {
        return this.encodeInvokeOnKey(MapTryRemoveCodec_1.MapTryRemoveCodec, keyData, keyData, 0, timeout)
            .then(MapTryRemoveCodec_1.MapTryRemoveCodec.decodeResponse);
    }
    setTtlInternal(keyData, ttl) {
        return this.encodeInvokeOnKey(MapSetTtlCodec_1.MapSetTtlCodec, keyData, keyData, ttl)
            .then(MapSetTtlCodec_1.MapSetTtlCodec.decodeResponse);
    }
    putAllInternal(pairs, triggerMapLoader) {
        const partitionService = this.client.getPartitionService();
        const partitionsToKeys = {};
        for (const pair of pairs) {
            const keyData = this.toData(pair[0]);
            const pId = partitionService.getPartitionId(keyData);
            if (!partitionsToKeys[pId]) {
                partitionsToKeys[pId] = [];
            }
            partitionsToKeys[pId].push([keyData, this.toData(pair[1])]);
        }
        const partitionPromises = [];
        for (const partition in partitionsToKeys) {
            partitionPromises.push(this.encodeInvokeOnPartition(MapPutAllCodec_1.MapPutAllCodec, Number(partition), partitionsToKeys[partition], triggerMapLoader)
                .then(() => this.finalizePutAll(partitionsToKeys)));
        }
        return Promise.all(partitionPromises).then(() => { });
    }
    addEntryListenerInternal(listener, predicate, key, includeValue) {
        let flags = null;
        const conversionTable = {
            added: EventType_1.EventType.ADDED,
            mapCleared: EventType_1.EventType.CLEAR_ALL,
            evicted: EventType_1.EventType.EVICTED,
            mapEvicted: EventType_1.EventType.EVICT_ALL,
            merged: EventType_1.EventType.MERGED,
            removed: EventType_1.EventType.REMOVED,
            updated: EventType_1.EventType.UPDATED,
            expired: EventType_1.EventType.EXPIRED,
            loaded: EventType_1.EventType.LOADED,
        };
        for (const funcName in conversionTable) {
            if (listener[funcName]) {
                flags = flags | conversionTable[funcName];
            }
        }
        const toObject = this.toObject.bind(this);
        const entryEventHandler = (key, value, oldValue, mergingValue, eventType, uuid, numberOfAffectedEntries) => {
            const member = this.client.getClusterService().getMember(uuid);
            const name = this.name;
            key = toObject(key);
            value = toObject(value);
            oldValue = toObject(oldValue);
            mergingValue = toObject(mergingValue);
            const entryEvent = new EntryListener_1.EntryEvent(name, key, value, oldValue, mergingValue, member);
            const mapEvent = new MapListener_1.MapEvent(name, numberOfAffectedEntries, member);
            switch (eventType) {
                case EventType_1.EventType.ADDED:
                    listener.added.apply(null, [entryEvent]);
                    break;
                case EventType_1.EventType.REMOVED:
                    listener.removed.apply(null, [entryEvent]);
                    break;
                case EventType_1.EventType.UPDATED:
                    listener.updated.apply(null, [entryEvent]);
                    break;
                case EventType_1.EventType.EVICTED:
                    listener.evicted.apply(null, [entryEvent]);
                    break;
                case EventType_1.EventType.EVICT_ALL:
                    listener.mapEvicted.apply(null, [mapEvent]);
                    break;
                case EventType_1.EventType.CLEAR_ALL:
                    listener.mapCleared.apply(null, [mapEvent]);
                    break;
                case EventType_1.EventType.MERGED:
                    listener.merged.apply(null, [entryEvent]);
                    break;
                case EventType_1.EventType.EXPIRED:
                    listener.expired.apply(null, [entryEvent]);
                    break;
                case EventType_1.EventType.LOADED:
                    listener.loaded.apply(null, [entryEvent]);
                    break;
            }
        };
        let codec;
        let listenerHandler;
        if (key && predicate) {
            const keyData = this.toData(key);
            const predicateData = this.toData(predicate);
            codec = this.createEntryListenerToKeyWithPredicate(this.name, keyData, predicateData, includeValue, flags);
            listenerHandler = MapAddEntryListenerToKeyWithPredicateCodec_1.MapAddEntryListenerToKeyWithPredicateCodec.handle;
        }
        else if (key && !predicate) {
            const keyData = this.toData(key);
            codec = this.createEntryListenerToKey(this.name, keyData, includeValue, flags);
            listenerHandler = MapAddEntryListenerToKeyCodec_1.MapAddEntryListenerToKeyCodec.handle;
        }
        else if (!key && predicate) {
            const predicateData = this.toData(predicate);
            codec = this.createEntryListenerWithPredicate(this.name, predicateData, includeValue, flags);
            listenerHandler = MapAddEntryListenerWithPredicateCodec_1.MapAddEntryListenerWithPredicateCodec.handle;
        }
        else {
            codec = this.createEntryListener(this.name, includeValue, flags);
            listenerHandler = MapAddEntryListenerCodec_1.MapAddEntryListenerCodec.handle;
        }
        return this.client.getListenerService()
            .registerListener(codec, (m) => {
            listenerHandler(m, entryEventHandler);
        });
    }
    createEntryListenerToKey(name, keyData, includeValue, flags) {
        return {
            encodeAddRequest(localOnly) {
                return MapAddEntryListenerToKeyCodec_1.MapAddEntryListenerToKeyCodec.encodeRequest(name, keyData, includeValue, flags, localOnly);
            },
            decodeAddResponse(msg) {
                return MapAddEntryListenerToKeyCodec_1.MapAddEntryListenerToKeyCodec.decodeResponse(msg);
            },
            encodeRemoveRequest(listenerId) {
                return MapRemoveEntryListenerCodec_1.MapRemoveEntryListenerCodec.encodeRequest(name, listenerId);
            },
        };
    }
    createEntryListenerToKeyWithPredicate(name, keyData, predicateData, includeValue, flags) {
        return {
            encodeAddRequest(localOnly) {
                return MapAddEntryListenerToKeyWithPredicateCodec_1.MapAddEntryListenerToKeyWithPredicateCodec.encodeRequest(name, keyData, predicateData, includeValue, flags, localOnly);
            },
            decodeAddResponse(msg) {
                return MapAddEntryListenerToKeyWithPredicateCodec_1.MapAddEntryListenerToKeyWithPredicateCodec.decodeResponse(msg);
            },
            encodeRemoveRequest(listenerId) {
                return MapRemoveEntryListenerCodec_1.MapRemoveEntryListenerCodec.encodeRequest(name, listenerId);
            },
        };
    }
    createEntryListenerWithPredicate(name, predicateData, includeValue, flags) {
        return {
            encodeAddRequest(localOnly) {
                return MapAddEntryListenerWithPredicateCodec_1.MapAddEntryListenerWithPredicateCodec.encodeRequest(name, predicateData, includeValue, flags, localOnly);
            },
            decodeAddResponse(msg) {
                return MapAddEntryListenerWithPredicateCodec_1.MapAddEntryListenerWithPredicateCodec.decodeResponse(msg);
            },
            encodeRemoveRequest(listenerId) {
                return MapRemoveEntryListenerCodec_1.MapRemoveEntryListenerCodec.encodeRequest(name, listenerId);
            },
        };
    }
    createEntryListener(name, includeValue, flags) {
        return {
            encodeAddRequest(localOnly) {
                return MapAddEntryListenerCodec_1.MapAddEntryListenerCodec.encodeRequest(name, includeValue, flags, localOnly);
            },
            decodeAddResponse(msg) {
                return MapAddEntryListenerCodec_1.MapAddEntryListenerCodec.decodeResponse(msg);
            },
            encodeRemoveRequest(listenerId) {
                return MapRemoveEntryListenerCodec_1.MapRemoveEntryListenerCodec.encodeRequest(name, listenerId);
            },
        };
    }
    checkNotPagingPredicate(v) {
        if (v instanceof DefaultPredicates_1.PagingPredicateImpl) {
            throw new RangeError('Paging predicate is not supported.');
        }
    }
}
exports.MapProxy = MapProxy;

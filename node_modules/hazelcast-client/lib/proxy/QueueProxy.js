"use strict";
/*
 * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/** @ignore */ /** */
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueueProxy = void 0;
const QueueAddAllCodec_1 = require("../codec/QueueAddAllCodec");
const QueueAddListenerCodec_1 = require("../codec/QueueAddListenerCodec");
const QueueClearCodec_1 = require("../codec/QueueClearCodec");
const QueueCompareAndRemoveAllCodec_1 = require("../codec/QueueCompareAndRemoveAllCodec");
const QueueCompareAndRetainAllCodec_1 = require("../codec/QueueCompareAndRetainAllCodec");
const QueueContainsAllCodec_1 = require("../codec/QueueContainsAllCodec");
const QueueContainsCodec_1 = require("../codec/QueueContainsCodec");
const QueueDrainToCodec_1 = require("../codec/QueueDrainToCodec");
const QueueDrainToMaxSizeCodec_1 = require("../codec/QueueDrainToMaxSizeCodec");
const QueueIsEmptyCodec_1 = require("../codec/QueueIsEmptyCodec");
const QueueIteratorCodec_1 = require("../codec/QueueIteratorCodec");
const QueueOfferCodec_1 = require("../codec/QueueOfferCodec");
const QueuePeekCodec_1 = require("../codec/QueuePeekCodec");
const QueuePollCodec_1 = require("../codec/QueuePollCodec");
const QueuePutCodec_1 = require("../codec/QueuePutCodec");
const QueueRemainingCapacityCodec_1 = require("../codec/QueueRemainingCapacityCodec");
const QueueRemoveCodec_1 = require("../codec/QueueRemoveCodec");
const QueueRemoveListenerCodec_1 = require("../codec/QueueRemoveListenerCodec");
const QueueSizeCodec_1 = require("../codec/QueueSizeCodec");
const QueueTakeCodec_1 = require("../codec/QueueTakeCodec");
const ItemListener_1 = require("./ItemListener");
const core_1 = require("../core");
const PartitionSpecificProxy_1 = require("./PartitionSpecificProxy");
/** @internal */
class QueueProxy extends PartitionSpecificProxy_1.PartitionSpecificProxy {
    add(item) {
        return this.offer(item).then(function (ret) {
            if (ret) {
                return true;
            }
            else {
                throw new core_1.IllegalStateError('Queue is full.');
            }
        });
    }
    addAll(items) {
        const rawList = [];
        const toData = this.toData.bind(this);
        items.forEach(function (item) {
            rawList.push(toData(item));
        });
        return this.encodeInvoke(QueueAddAllCodec_1.QueueAddAllCodec, rawList)
            .then(QueueAddAllCodec_1.QueueAddAllCodec.decodeResponse);
    }
    addItemListener(listener, includeValue) {
        const handler = (message) => {
            QueueAddListenerCodec_1.QueueAddListenerCodec.handle(message, (item, uuid, eventType) => {
                let responseObject;
                if (item == null) {
                    responseObject = null;
                }
                else {
                    responseObject = this.toObject(item);
                }
                const member = this.client.getClusterService().getMember(uuid);
                const name = this.name;
                const itemEvent = new ItemListener_1.ItemEvent(name, eventType, responseObject, member);
                if (eventType === ItemListener_1.ItemEventType.ADDED && listener.itemAdded) {
                    listener.itemAdded.apply(null, [itemEvent]);
                }
                else if (eventType === ItemListener_1.ItemEventType.REMOVED && listener.itemRemoved) {
                    listener.itemRemoved.apply(null, [itemEvent]);
                }
            });
        };
        const codec = this.createEntryListener(this.name, includeValue);
        return this.client.getListenerService().registerListener(codec, handler);
    }
    clear() {
        return this.encodeInvoke(QueueClearCodec_1.QueueClearCodec).then(() => { });
    }
    contains(item) {
        const itemData = this.toData(item);
        return this.encodeInvoke(QueueContainsCodec_1.QueueContainsCodec, itemData)
            .then(QueueContainsCodec_1.QueueContainsCodec.decodeResponse);
    }
    containsAll(items) {
        const toData = this.toData.bind(this);
        const rawItems = items.map(toData);
        return this.encodeInvoke(QueueContainsAllCodec_1.QueueContainsAllCodec, rawItems)
            .then(QueueContainsAllCodec_1.QueueContainsAllCodec.decodeResponse);
    }
    drainTo(arr, maxElements = null) {
        const toObject = this.toObject.bind(this);
        let promise;
        if (maxElements === null) {
            promise = this.encodeInvoke(QueueDrainToCodec_1.QueueDrainToCodec)
                .then(QueueDrainToCodec_1.QueueDrainToCodec.decodeResponse);
        }
        else {
            promise = this.encodeInvoke(QueueDrainToMaxSizeCodec_1.QueueDrainToMaxSizeCodec, maxElements)
                .then(QueueDrainToMaxSizeCodec_1.QueueDrainToMaxSizeCodec.decodeResponse);
        }
        return promise.then(function (rawArr) {
            rawArr.forEach(function (rawItem) {
                arr.push(toObject(rawItem));
            });
            return rawArr.length;
        });
    }
    isEmpty() {
        return this.encodeInvoke(QueueIsEmptyCodec_1.QueueIsEmptyCodec)
            .then(QueueIsEmptyCodec_1.QueueIsEmptyCodec.decodeResponse);
    }
    offer(item, time = 0) {
        const itemData = this.toData(item);
        return this.encodeInvoke(QueueOfferCodec_1.QueueOfferCodec, itemData, time)
            .then(QueueOfferCodec_1.QueueOfferCodec.decodeResponse);
    }
    peek() {
        return this.encodeInvoke(QueuePeekCodec_1.QueuePeekCodec)
            .then((clientMessage) => {
            const response = QueuePeekCodec_1.QueuePeekCodec.decodeResponse(clientMessage);
            return this.toObject(response);
        });
    }
    poll(time = 0) {
        return this.encodeInvoke(QueuePollCodec_1.QueuePollCodec, time)
            .then((clientMessage) => {
            const response = QueuePollCodec_1.QueuePollCodec.decodeResponse(clientMessage);
            return this.toObject(response);
        });
    }
    put(item) {
        const itemData = this.toData(item);
        return this.encodeInvoke(QueuePutCodec_1.QueuePutCodec, itemData).then(() => { });
    }
    remainingCapacity() {
        return this.encodeInvoke(QueueRemainingCapacityCodec_1.QueueRemainingCapacityCodec)
            .then(QueueRemainingCapacityCodec_1.QueueRemainingCapacityCodec.decodeResponse);
    }
    remove(item) {
        const itemData = this.toData(item);
        return this.encodeInvoke(QueueRemoveCodec_1.QueueRemoveCodec, itemData)
            .then(QueueRemoveCodec_1.QueueRemoveCodec.decodeResponse);
    }
    removeAll(items) {
        const toData = this.toData.bind(this);
        const rawItems = items.map(toData);
        return this.encodeInvoke(QueueCompareAndRemoveAllCodec_1.QueueCompareAndRemoveAllCodec, rawItems)
            .then(QueueCompareAndRemoveAllCodec_1.QueueCompareAndRemoveAllCodec.decodeResponse);
    }
    removeItemListener(registrationId) {
        return this.client.getListenerService().deregisterListener(registrationId);
    }
    retainAll(items) {
        const toData = this.toData.bind(this);
        const rawItems = items.map(toData);
        return this.encodeInvoke(QueueCompareAndRetainAllCodec_1.QueueCompareAndRetainAllCodec, rawItems)
            .then(QueueCompareAndRetainAllCodec_1.QueueCompareAndRetainAllCodec.decodeResponse);
    }
    size() {
        return this.encodeInvoke(QueueSizeCodec_1.QueueSizeCodec)
            .then(QueueSizeCodec_1.QueueSizeCodec.decodeResponse);
    }
    take() {
        return this.encodeInvoke(QueueTakeCodec_1.QueueTakeCodec)
            .then((clientMessage) => {
            const response = QueueTakeCodec_1.QueueTakeCodec.decodeResponse(clientMessage);
            return this.toObject(response);
        });
    }
    toArray() {
        return this.encodeInvoke(QueueIteratorCodec_1.QueueIteratorCodec)
            .then((clientMessage) => {
            const response = QueueIteratorCodec_1.QueueIteratorCodec.decodeResponse(clientMessage);
            return response.map(this.toObject.bind(this));
        });
    }
    createEntryListener(name, includeValue) {
        return {
            encodeAddRequest(localOnly) {
                return QueueAddListenerCodec_1.QueueAddListenerCodec.encodeRequest(name, includeValue, localOnly);
            },
            decodeAddResponse(msg) {
                return QueueAddListenerCodec_1.QueueAddListenerCodec.decodeResponse(msg);
            },
            encodeRemoveRequest(listenerId) {
                return QueueRemoveListenerCodec_1.QueueRemoveListenerCodec.encodeRequest(name, listenerId);
            },
        };
    }
}
exports.QueueProxy = QueueProxy;

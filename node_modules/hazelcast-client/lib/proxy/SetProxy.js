"use strict";
/*
 * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/** @ignore */ /** */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SetProxy = void 0;
const SetAddAllCodec_1 = require("../codec/SetAddAllCodec");
const SetAddCodec_1 = require("../codec/SetAddCodec");
const SetAddListenerCodec_1 = require("../codec/SetAddListenerCodec");
const SetClearCodec_1 = require("../codec/SetClearCodec");
const SetCompareAndRemoveAllCodec_1 = require("../codec/SetCompareAndRemoveAllCodec");
const SetCompareAndRetainAllCodec_1 = require("../codec/SetCompareAndRetainAllCodec");
const SetContainsAllCodec_1 = require("../codec/SetContainsAllCodec");
const SetContainsCodec_1 = require("../codec/SetContainsCodec");
const SetGetAllCodec_1 = require("../codec/SetGetAllCodec");
const SetIsEmptyCodec_1 = require("../codec/SetIsEmptyCodec");
const SetRemoveCodec_1 = require("../codec/SetRemoveCodec");
const SetRemoveListenerCodec_1 = require("../codec/SetRemoveListenerCodec");
const SetSizeCodec_1 = require("../codec/SetSizeCodec");
const ItemListener_1 = require("./ItemListener");
const PartitionSpecificProxy_1 = require("./PartitionSpecificProxy");
/** @internal */
class SetProxy extends PartitionSpecificProxy_1.PartitionSpecificProxy {
    add(entry) {
        return this.encodeInvoke(SetAddCodec_1.SetAddCodec, this.toData(entry))
            .then(SetAddCodec_1.SetAddCodec.decodeResponse);
    }
    addAll(items) {
        return this.encodeInvoke(SetAddAllCodec_1.SetAddAllCodec, this.serializeList(items))
            .then(SetAddAllCodec_1.SetAddAllCodec.decodeResponse);
    }
    toArray() {
        return this.encodeInvoke(SetGetAllCodec_1.SetGetAllCodec)
            .then((clientMessage) => {
            const response = SetGetAllCodec_1.SetGetAllCodec.decodeResponse(clientMessage);
            return response.map(this.toObject.bind(this));
        });
    }
    clear() {
        return this.encodeInvoke(SetClearCodec_1.SetClearCodec).then(() => { });
    }
    contains(entry) {
        return this.encodeInvoke(SetContainsCodec_1.SetContainsCodec, this.toData(entry))
            .then(SetContainsCodec_1.SetContainsCodec.decodeResponse);
    }
    containsAll(items) {
        return this.encodeInvoke(SetContainsAllCodec_1.SetContainsAllCodec, this.serializeList(items))
            .then(SetContainsAllCodec_1.SetContainsAllCodec.decodeResponse);
    }
    isEmpty() {
        return this.encodeInvoke(SetIsEmptyCodec_1.SetIsEmptyCodec)
            .then(SetIsEmptyCodec_1.SetIsEmptyCodec.decodeResponse);
    }
    remove(entry) {
        return this.encodeInvoke(SetRemoveCodec_1.SetRemoveCodec, this.toData(entry))
            .then(SetRemoveCodec_1.SetRemoveCodec.decodeResponse);
    }
    removeAll(items) {
        return this.encodeInvoke(SetCompareAndRemoveAllCodec_1.SetCompareAndRemoveAllCodec, this.serializeList(items))
            .then(SetCompareAndRemoveAllCodec_1.SetCompareAndRemoveAllCodec.decodeResponse);
    }
    retainAll(items) {
        return this.encodeInvoke(SetCompareAndRetainAllCodec_1.SetCompareAndRetainAllCodec, this.serializeList(items))
            .then(SetCompareAndRetainAllCodec_1.SetCompareAndRetainAllCodec.decodeResponse);
    }
    size() {
        return this.encodeInvoke(SetSizeCodec_1.SetSizeCodec)
            .then(SetSizeCodec_1.SetSizeCodec.decodeResponse);
    }
    addItemListener(listener, includeValue = true) {
        const handler = (message) => {
            SetAddListenerCodec_1.SetAddListenerCodec.handle(message, (item, uuid, eventType) => {
                const responseObject = this.toObject(item);
                const member = this.client.getClusterService().getMember(uuid);
                const name = this.name;
                const itemEvent = new ItemListener_1.ItemEvent(name, eventType, responseObject, member);
                if (eventType === ItemListener_1.ItemEventType.ADDED && listener.itemAdded) {
                    listener.itemAdded.apply(null, [itemEvent]);
                }
                else if (eventType === ItemListener_1.ItemEventType.REMOVED && listener.itemRemoved) {
                    listener.itemRemoved.apply(null, [itemEvent]);
                }
            });
        };
        const codec = this.createEntryListener(this.name, includeValue);
        return this.client.getListenerService().registerListener(codec, handler);
    }
    removeItemListener(registrationId) {
        return this.client.getListenerService().deregisterListener(registrationId);
    }
    serializeList(input) {
        return input.map((each) => {
            return this.toData(each);
        });
    }
    createEntryListener(name, includeValue) {
        return {
            encodeAddRequest(localOnly) {
                return SetAddListenerCodec_1.SetAddListenerCodec.encodeRequest(name, includeValue, localOnly);
            },
            decodeAddResponse(msg) {
                return SetAddListenerCodec_1.SetAddListenerCodec.decodeResponse(msg);
            },
            encodeRemoveRequest(listenerId) {
                return SetRemoveListenerCodec_1.SetRemoveListenerCodec.encodeRequest(name, listenerId);
            },
        };
    }
}
exports.SetProxy = SetProxy;

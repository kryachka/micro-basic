import * as Long from 'long';
import { Predicate, ReadOnlyLazyList, ListComparator } from '../core';
import { EntryListener } from './EntryListener';
import { ReplicatedMap } from './ReplicatedMap';
import { PartitionSpecificProxy } from './PartitionSpecificProxy';
export declare class ReplicatedMapProxy<K, V> extends PartitionSpecificProxy implements ReplicatedMap<K, V> {
    put(key: K, value: V, ttl?: Long | number): Promise<V>;
    clear(): Promise<void>;
    get(key: K): Promise<V>;
    containsKey(key: K): Promise<boolean>;
    containsValue(value: V): Promise<boolean>;
    size(): Promise<number>;
    isEmpty(): Promise<boolean>;
    remove(key: K): Promise<V>;
    putAll(pairs: Array<[K, V]>): Promise<void>;
    keySet(): Promise<K[]>;
    values(comparator?: ListComparator<V>): Promise<ReadOnlyLazyList<V>>;
    entrySet(): Promise<Array<[K, V]>>;
    addEntryListenerToKeyWithPredicate(listener: EntryListener<K, V>, key: K, predicate: Predicate): Promise<string>;
    addEntryListenerWithPredicate(listener: EntryListener<K, V>, predicate: Predicate): Promise<string>;
    addEntryListenerToKey(listener: EntryListener<K, V>, key: K): Promise<string>;
    addEntryListener(listener: EntryListener<K, V>): Promise<string>;
    removeEntryListener(listenerId: string): Promise<boolean>;
    private addEntryListenerInternal;
    private createEntryListener;
    private createEntryListenerToKey;
    private createEntryListenerWithPredicate;
    private createEntryListenerToKeyWithPredicate;
}
